//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityDataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BranchInformationSystemEntities : DbContext
    {
        public BranchInformationSystemEntities()
            : base("name=BranchInformationSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<USPInsertNotification> USPInsertNotification(string eventCategory, string notificationType, string tO, string cC, string bCC, string subject, string hTMLMessage, string textMessage, string transType, Nullable<long> transCode, string scheduleDateTime, Nullable<long> userCode)
        {
            var eventCategoryParameter = eventCategory != null ?
                new ObjectParameter("EventCategory", eventCategory) :
                new ObjectParameter("EventCategory", typeof(string));
    
            var notificationTypeParameter = notificationType != null ?
                new ObjectParameter("NotificationType", notificationType) :
                new ObjectParameter("NotificationType", typeof(string));
    
            var tOParameter = tO != null ?
                new ObjectParameter("TO", tO) :
                new ObjectParameter("TO", typeof(string));
    
            var cCParameter = cC != null ?
                new ObjectParameter("CC", cC) :
                new ObjectParameter("CC", typeof(string));
    
            var bCCParameter = bCC != null ?
                new ObjectParameter("BCC", bCC) :
                new ObjectParameter("BCC", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var hTMLMessageParameter = hTMLMessage != null ?
                new ObjectParameter("HTMLMessage", hTMLMessage) :
                new ObjectParameter("HTMLMessage", typeof(string));
    
            var textMessageParameter = textMessage != null ?
                new ObjectParameter("TextMessage", textMessage) :
                new ObjectParameter("TextMessage", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var transCodeParameter = transCode.HasValue ?
                new ObjectParameter("TransCode", transCode) :
                new ObjectParameter("TransCode", typeof(long));
    
            var scheduleDateTimeParameter = scheduleDateTime != null ?
                new ObjectParameter("ScheduleDateTime", scheduleDateTime) :
                new ObjectParameter("ScheduleDateTime", typeof(string));
    
            var userCodeParameter = userCode.HasValue ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPInsertNotification>("USPInsertNotification", eventCategoryParameter, notificationTypeParameter, tOParameter, cCParameter, bCCParameter, subjectParameter, hTMLMessageParameter, textMessageParameter, transTypeParameter, transCodeParameter, scheduleDateTimeParameter, userCodeParameter);
        }
    
        public virtual ObjectResult<USPGetMessageStatus_Result> USPGetMessageStatus(string nECode, string transType, string transCode, string userCode, string notificationType, string eventCategory, string subject, string status, Nullable<int> noOfRetry, Nullable<int> size, Nullable<int> from, string scheduleDateTime, string sentDateTime, string recipient)
        {
            var nECodeParameter = nECode != null ?
                new ObjectParameter("NECode", nECode) :
                new ObjectParameter("NECode", typeof(string));
    
            var transTypeParameter = transType != null ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(string));
    
            var transCodeParameter = transCode != null ?
                new ObjectParameter("TransCode", transCode) :
                new ObjectParameter("TransCode", typeof(string));
    
            var userCodeParameter = userCode != null ?
                new ObjectParameter("UserCode", userCode) :
                new ObjectParameter("UserCode", typeof(string));
    
            var notificationTypeParameter = notificationType != null ?
                new ObjectParameter("NotificationType", notificationType) :
                new ObjectParameter("NotificationType", typeof(string));
    
            var eventCategoryParameter = eventCategory != null ?
                new ObjectParameter("EventCategory", eventCategory) :
                new ObjectParameter("EventCategory", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var noOfRetryParameter = noOfRetry.HasValue ?
                new ObjectParameter("NoOfRetry", noOfRetry) :
                new ObjectParameter("NoOfRetry", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(int));
    
            var scheduleDateTimeParameter = scheduleDateTime != null ?
                new ObjectParameter("ScheduleDateTime", scheduleDateTime) :
                new ObjectParameter("ScheduleDateTime", typeof(string));
    
            var sentDateTimeParameter = sentDateTime != null ?
                new ObjectParameter("SentDateTime", sentDateTime) :
                new ObjectParameter("SentDateTime", typeof(string));
    
            var recipientParameter = recipient != null ?
                new ObjectParameter("Recipient", recipient) :
                new ObjectParameter("Recipient", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPGetMessageStatus_Result>("USPGetMessageStatus", nECodeParameter, transTypeParameter, transCodeParameter, userCodeParameter, notificationTypeParameter, eventCategoryParameter, subjectParameter, statusParameter, noOfRetryParameter, sizeParameter, fromParameter, scheduleDateTimeParameter, sentDateTimeParameter, recipientParameter);
        }
    }
}
