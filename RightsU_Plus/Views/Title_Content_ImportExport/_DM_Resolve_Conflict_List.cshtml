@model RightsU_Entities.DM_Content_Music 
@using UTOFrameWork.FrameworkClasses;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    var Command_Name = "", IsCall = 'Y';;
    var fileType = '@ViewBag.FileType';
    var URL_BindGrid = '@Url.Action("BindGrid", "Title_Content_ImportExport")';
    var URL_SaveMappedData = '@Url.Action("SaveMappedData", "Title_Content_ImportExport")';
    var URL_MapData = '@Url.Action("MapData", "Title_Content_ImportExport")';
    var URL_Music_Title_Import = '@Url.Action("Music_Title_Import", "Music_Title")';
    var URL_titleImport = '@Url.Action("titleImport", "Title")';
    var URL_PopulateAutoCompleteData = '@Url.Action("PopulateAutoCompleteData", "Title_Content_ImportExport")';
    var URL_ClearSession = '@Url.Action("ClearSession", "Title_Content_ImportExport")';
    var URL_ValidateTalnet = '@Url.Action("ValidateTalent", "Title_Content_ImportExport")';
    var frameLimit = '24';
    var fileType = '@ViewBag.FileType';
    var IsValidForTab = true;
    $(document).ready(function () {
        addNumeric();
        BindGrid(true, false, '');
        $('#ResolveConflictTab > li > a').on('click', function () {
            debugger
            TabChange($(this).data('tabname'));
            var prevElm = $(this).parents('#ResolveConflictTab').find('li.active');
            if (!IsValidForTab) {
                $(this).removeClass('active');
                $(prevElm).addClass('active');
                IsValidForTab = true;
                return false;
            }
        });
        
        //SetPaging();
    });
    function handleOk() {
        if (Command_Name == "MAP")
            MapData(true, fileType);
    }
    function handleCancel() {
        Command_Name = '';
    }
    function addNumeric() {
        $(".pagingSize").numeric({
            allowMinus: false,
            allowThouSep: false,
            allowDecSep: false,
            max: 99,
            min: 1
        });
    }
    function SetPaging() {
        IsCall = 'N';
        var pageNo = 1, recordCount = 0, pagePerBatch = 0, recordPerPage = 0;
        pageNo = parseInt($('#hdnPageNo').val());
        recordCount = parseInt($('#hdnRecordCount').val());
        pagePerBatch = parseInt($('#hdnPagePerBatch').val());
        recordPerPage = parseInt($('#txtPageSize').val());

        var cnt = pageNo * recordPerPage;
        if (cnt >= recordCount) {
            var v1 = parseInt(recordCount / recordPerPage);
            if ((v1 * recordPerPage) == recordCount)
                pageNo = v1;
            else
                pageNo = v1 + 1;
        }

        if (pageNo == 0)
            pageNo = 1;

        var index = pageNo - 1;

        $('#hdnPageNo').val(pageNo);
        var opt = { callback: pageselectCallback };
        opt["items_per_page"] = recordPerPage;
        opt["num_display_entries"] = pagePerBatch;
        opt["num"] = 10;
        opt["prev_text"] = "<<";
        opt["next_text"] = ">>";
        opt["current_page"] = index;
        $("#Pagination").pagination(recordCount, opt);
    }
    function pageselectCallback(page_index, jq) {
        $('.required').removeClass('required');

        if (!ValidatePageSize('txtPageSize'))
            return false;

        var pageNo = page_index + 1
        $('#hdnPageNo').val(pageNo);
        if (IsCall == 'Y') {
            var valid = true;
            var tblOtherData = $("#tblOtherLogData tbody tr");
        
            $.each($(tblOtherData), function (index, value) {
                var DMContentMusicCode = $(value).find('input[id*="hdnDMContentMusicCode_"]').val();
                valid =  calculateDuration(DMContentMusicCode, true, true);
            });
            if (valid == true) 
                {
                    SaveMappedData();
                    BindGrid(false, false, '');
                }
        }
        else
            IsCall = 'Y';
    }
    function txtPageSize_OnChange(txtID) {
        $("[required='required']").removeAttr("required");
        $('.required').removeClass('required');
        if (!ValidatePageSize(txtID))
            return false;

        BindGrid(false, false, '');
        SetPaging();
    }
    function pageBinding() {
        BindGrid(false, false, '');
        SetPaging();
    }
    function ValidatePageSize(txtID) {
        var recordPerPage = $('#' + txtID).val()
        if ($.trim(recordPerPage) != '') {
            var pageSize = parseInt(recordPerPage);
            if (pageSize > 0)
                return true;
        }
        $('#' + txtID).attr('required', true)

        return false
    }
    function TabChange(tabName, DM_Master_Import_Code) {
        debugger
        var valid = true;
        var tblOtherData = $("#tblOtherLogData tbody tr");
        
        $.each($(tblOtherData), function (index, value) {
            var DMContentMusicCode = $(value).find('input[id*="hdnDMContentMusicCode_"]').val();
         valid =  calculateDuration(DMContentMusicCode, true, true);
        });
        if (valid == true) {
            IsValidForTab = true;
            SaveMappedData();
            var previousTabName = $('#hdnTabName').val();
            $('#hdnTabName').val(tabName);
            BindGrid(false, true, previousTabName);
            SetPaging();
        }
    }
    function BindGrid(fetchData, isTabChanged, previousTabName) {
        $('.required').removeClass('required');
        $("[required='required']").removeAttr("required");

        var masterImportCode = $.trim($('#hdnMasterImportCode').val());
        var currentTabName = $.trim($('#hdnTabName').val());
        var pageNo = $('#hdnPageNo').val();
        var recordPerPage = $('#txtPageSize').val();
        showLoading();
        $.ajax({
            type: "POST",
            url: URL_BindGrid,
            traditional: true,
            enctype: 'multipart/form-data',
            async: false,
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                masterImportCode: masterImportCode,
                fetchData: fetchData,
                isTabChanged: isTabChanged,
                currentTabName: currentTabName,
                previousTabName: previousTabName,
                pageNo: pageNo,
                recordPerPage: recordPerPage
            }),
            success: function (result) {
                if (result == "true") {
                    redirectToLogin();
                }
                else {
                    $("#divMappingData").empty();
                    $("#divMappingData").append(result);

                    var totalLength = $("input[id*='chkCreateNew']:checkbox").length;
                    var checkedLength = $("input[id*='chkCreateNew']:checkbox:checked").length;
                    $("input[id*='chkAll']:checkbox").prop('checked', (totalLength == checkedLength && checkedLength > 0));


                    $("input[id*='chkCreateNew']:checkbox").click(function () {
                        var totalLength = $("input[id*='chkCreateNew']:checkbox").length;
                        var checkedLength = $("input[id*='chkCreateNew']:checkbox:checked").length;
                        $("input[id*='chkAll']:checkbox").prop('checked', (totalLength == checkedLength));
                        var txtMappedNameID = $(this)[0].id.replace('chkCreateNew', 'txtMappedName');
                        $("#" + txtMappedNameID).prop('disabled', false);
                        if ($(this).is(':checked'))
                            $("#" + txtMappedNameID).prop('disabled', true);

                    });

                    $("input[id*='chkCreateNewOther']:checkbox").click(function () {
                        var totalLength = $("input[id*='chkCreateNewOther']:checkbox").length;
                        var checkedLength = $("input[id*='chkCreateNewOther']:checkbox:checked").length;
                        $("input[id*='chkAllOther']:checkbox").prop('checked', (totalLength == checkedLength));
                    });

                    $("input[id*='chkAll']:checkbox").click(function () {
                        $("input[id*='chkCreateNew']:checkbox").prop('checked', $(this).is(':checked'));
                        $("input[id*='txtMappedName_']").prop('disabled', ($(this).is(':checked')));
                    });
                    $("input[id*='chkAllOther']:checkbox").click(function () {
                        $("input[id*='chkCreateNewOther']:checkbox").prop('checked', $(this).is(':checked'));
                    });
                    initializeTooltip();
                    hideLoading();
                }
            },
            error: function (result) {
                alert(result);
            }
        });
    }
    function PopulateAutoCompleteData(masterLogCode) {
        var keyword = $("#txtMappedName_" + masterLogCode).val();
        $("#txtMappedName_" + masterLogCode).autocomplete({
            focus: function () {
                return false;
            },
            search: function (e, u) {
                $(this).addClass('loader');
            },
            source: function (request, response) {
                $("#hdnMappedCode_" + masterLogCode).val('');
                var param = {
                    keyword: keyword
                };
                $.ajax({
                    url: URL_PopulateAutoCompleteData,
                    data: JSON.stringify(param),
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        if (data.length == 0) {
                            data[0] = 'Result Not Found';
                            response($.map(data, function (v, i) {
                                $("#txtMappedName_" + masterLogCode).removeClass('loader');
                                return {
                                    label: 'Result Not Found',
                                    val: '0'
                                }
                            }))
                        }
                        else {
                            response($.map(data, function (v, i) {
                                $("#txtMappedName_" + masterLogCode).removeClass('loader');
                                return {
                                    label: v.Mapping_Name,
                                    val: v.Mapping_Code
                                }
                            }))
                        }

                        //if (data.length == 0) {
                        //    data[0] = 'Result Not Found~0';
                        //}
                        //response($.map(data, function (v, i) {
                        //    return {
                        //        label: v.Mapping_Name,
                        //        val: v.Mapping_Code
                        //    }
                        //}))
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("Error" + textStatus);
                    }
                });
            },
            select: function (event, ui) {
                $("#hdnMappedCode_" + masterLogCode).val(ui.item.val);
                if (ui.item.val == '0') {
                    return false;
                }
            },
            minLength: 2,
            open: function (event, ui) {
                $(".ui-autocomplete").css("position", "absolute");
                $(".ui-autocomplete").css("max-height", "200px");
                $(".ui-autocomplete").css("max-width", "250px");
                $(".ui-autocomplete").css("overflow-y", "auto");
                $(".ui-autocomplete").css("overflow-x", "hidden");
                $(".ui-autocomplete").css("z-index", "2147483647");
            },
        });
    }
    function SaveMappedData() {
        debugger
        var lstDM_MasterLog = new Array();
        var lstOtherLog = new Array();
        var lstSystemMapLog = new Array();
        var tblData = $("#tblMasterLogData tbody tr");
        var tblOtherData = $("#tblOtherLogData tbody tr"); 
        var tblSystemMappedDta = $("#tblSystemMappedMasterLogData tbody tr");
        $.each($(tblData), function (index, value) {
            var masterLogCode = $(value).find('input[id*="hdnMasterLogCode_"]').val();
            var isChecked = $(value).find('input[id*="chkCreateNew_"]').prop('checked');
            var mappedName = $(value).find('input[name="MappedName"]').val();
            var mappedCode = $(value).find('input[name="MappedCode"]').val();
            if (isChecked)
                var mappedCode = 0;

            lstDM_MasterLog.push({
                Mapped_Name: mappedName, Mapped_Code: mappedCode, IsIgnore: isChecked, DM_Master_Log_Code: masterLogCode
            });
        });

        $.each($(tblOtherData), function (index, value) {
            var DMContentMusicCode = $(value).find('input[id*="hdnDMContentMusicCode_"]').val();
            var isIgnore = $(value).find('input[id*="chkCreateNewOther_"]').prop('checked');
            var txtFrom = $(value).find('input[id*="txtFrom_"]').val();
            var txtTo = $(value).find('input[id*="txtTo_"]').val();
            var txtDuration = $(value).find('input[id*="txtDuration_"]').val();
            var txtFromFrame = $(value).find('input[id*="txtFrameFrom_"]').val();
            var txtToFrame = $(value).find('input[id*="txtFrameTo_"]').val();
            var txtDurationFrame = $(value).find('input[id*="txtDurationFrame_"]').val();

            lstOtherLog.push({
                From: txtFrom, To: txtTo, Duration: txtDuration, From_Frame: txtFromFrame, To_Frame: txtToFrame, Duration_Frame: txtDurationFrame, Is_Ignore: isIgnore, IntCode: DMContentMusicCode
            });
        });
        $.each($(tblSystemMappedDta), function (index, value) {
            debugger
            var masterLogCode = $(value).find('input[id*="hdnSystemMappingMasterLogCode_"]').val();
            //var isChecked = $(value).find('input[id*="chkCreateNew_"]').prop('checked');
            var mappedName = $(value).find('input[name="MappedName"]').val();
            if (mappedName == "") {
                $('.txtMapped').attr('required', true);
                return false;
            }
            var mappedCode = $(value).find('input[name="MappedCode"]').val();
           
            lstSystemMapLog.push({
                Mapped_Name: mappedName, Mapped_Code: mappedCode,  DM_Master_Log_Code: masterLogCode
            });
        });
        if (lstDM_MasterLog.length > 0 || lstOtherLog.length > 0 || lstSystemMapLog.length > 0) {
            $.ajax({
                type: "POST",
                url: URL_SaveMappedData,
                enctype: 'multipart/form-data',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    lst: lstDM_MasterLog,
                    lstOther: lstOtherLog,
                    lstSystemMapLog: lstSystemMapLog
                }),
                async: false,
                success: function (result) {
                    if (result == "true") {
                        redirectToLogin();
                    }
                    else {

                        $('#hdnMappedCount').val(result.MappedCount);
                        if (result.Status == "E") {
                            showAlert("E", result.Message);
                        }
                    }
                },
                error: function (result) {
                    alert('Error: ' + result.responseText);
                    hideLoading();
                }
            });
        }
    }
    function calculateDuration(rowNo, showError, validateOnly) {
        var returnVal = true;
        var timeFrom = $("#txtFrom_" + rowNo).val();
        var fromFrame = $("#txtFrameFrom_" + rowNo).val();
        var timeTo = $("#txtTo_" + rowNo).val();
        var toFrame = $("#txtFrameTo_" + rowNo).val();
        var duration = $("#txtDuration_" + rowNo).val();
        var isIgnore = $("#chkCreateNewOther_" + rowNo).prop('checked');
        var durationframe = $("#txtDurationFrame_" + rowNo).val();
        if (timeFrom == "") {
            if (!isIgnore) {
                returnVal = false;
            }
            if (showError) {
                if (!isIgnore) {
                    $("#txtFrom_" + rowNo).addClass('required');
                    IsValidForTab = false;
                }
            }
        }
        if (timeTo == "") {
            if (!isIgnore) {
                returnVal = false;
            }
            if (showError) {
                if (!isIgnore) {
                    $("#txtTo_" + rowNo).addClass('required');
                    IsValidForTab = false;
                }
            }
        }
        if (duration == "") {
            if (!isIgnore) {
                returnVal = false;
            }
            if (showError) {
                if (!isIgnore) {
                    $("#txtDuration_" + rowNo).addClass('required');
                    IsValidForTab = false;
                }
            }
        }
        if (isNaN(fromFrame))
        {
            if (!isIgnore) {
                returnVal = false;
            }
            if (showError) {
                if (!isIgnore) {
                    $("#txtFrameFrom_" + rowNo).addClass('required');
                    IsValidForTab = false;
                }
            }
        }
        if (isNaN(toFrame)) {
            if (!isIgnore) {
                returnVal = false;
            }
            if (showError) {
                if (!isIgnore) {
                    $("#txtFrameTo_" + rowNo).addClass('required');
                    IsValidForTab = false;
                }
            }
        } if (isNaN(durationframe)) {
            if (!isIgnore) {
                returnVal = false;
            }
            if (showError) {
                if (!isIgnore) {
                    $("#txtDurationFrame_" + rowNo).addClass('required');
                    IsValidForTab = false;
                }
            }
        }
        if (returnVal) {
            if (duration == "00:00" || duration == "00:00:00") {
                var arrFrom = timeFrom.split(":");
                var arrTo = timeTo.split(":");
                if (timeFrom == "00:00:00") {
                    if (!isIgnore) {
                        returnVal = false;
                    }
                    if (showError) {
                        if (!isIgnore) {
                            $("#txtFrom_" + rowNo).addClass('required');
                            IsValidForTab = false;
                        }
                    }
                }
                if (arrFrom.length == 2)
                    timeFrom = arrFrom[0] + ":" + arrFrom[1] + ":00"

                if (fromFrame == "") {
                    fromFrame = "00";
                }
                $("#txtFrameFrom_" + rowNo).val(FormatNumberLength(fromFrame, 2));
                if (timeTo == "00:00:00") {
                    if (!isIgnore) {
                        returnVal = false;
                    }
                    if (showError) {
                        if (!isIgnore) {
                            $("#txtTo_" + rowNo).addClass('required');
                            IsValidForTab = false;
                        }
                    }
                }
                if (arrTo.length == 2)
                    timeTo = arrTo[0] + ":" + arrTo[1] + ":00"

                if (toFrame == "") {
                    toFrame = "00";
                }
                $("#txtFrameTo_" + rowNo).val(FormatNumberLength(toFrame, 2));
                if (returnVal) {
                    var totalSec_From = ConvertToSeconds(timeFrom);
                    var totalSec_To = ConvertToSeconds(timeTo);
                    var diffSec = totalSec_To - totalSec_From;
                    if (diffSec <= 0) {
                        if (!isIgnore) {
                            returnVal = false;
                        }
                        if (showError) {
                            if (!isIgnore) {
                                $("#txtTo_" + rowNo).addClass('required');
                                showAlert("E", "Invalid Duration");
                                IsValidForTab = false;
                            }
                        }
                    }
                    if (returnVal && !validateOnly) {
                        var frameLimit = '24';
                        var durationFrame = 0;
                        if (parseInt(toFrame) < parseInt(fromFrame)) {
                            diffSec = diffSec - 1;
                            durationFrame = parseInt(frameLimit) - parseInt(fromFrame)
                            durationFrame = durationFrame + parseInt(toFrame);
                        }
                        else
                            durationFrame = parseInt(toFrame) - parseInt(fromFrame)
                        var balDuration = GetTimeInFormat(diffSec);
                        $("#txtDuration_" + rowNo).val(balDuration);
                        $("#txtDurationFrame_" + rowNo).val(FormatNumberLength(durationFrame, 2));
                    }
                }
                return returnVal;
            }
            else {
                if ((timeFrom != "00:00:00" && timeFrom != "00:00") || (timeTo != "00:00:00" && timeTo != "00:00")) {
                    var arrFrom = timeFrom.split(":");
                    var arrTo = timeTo.split(":");

                    if (timeFrom == "00:00:00" || timeFrom == "00:00") {
                        if (!isIgnore) {
                            returnVal = false;
                        }
                        if (showError) {
                            if (!isIgnore) {
                                $("#txtFrom_" + rowNo).addClass('required');
                                IsValidForTab = false;
                            }
                        }
                    }
                    if (arrFrom.length == 2)
                        timeFrom = arrFrom[0] + ":" + arrFrom[1] + ":00"

                    if (fromFrame == "") {
                        fromFrame = "00";
                    }
                    $("#txtFrameFrom_" + rowNo).val(FormatNumberLength(fromFrame, 2));

                    if (timeTo == "00:00:00" || timeTo == "00:00") {
                        if (!isIgnore) {
                            returnVal = false;
                        }
                        if (showError) {
                            if (!isIgnore) {
                                $("#txtTo_" + rowNo).addClass('required');
                                IsValidForTab = false;
                            }
                        }
                    }
                    if (arrTo.length == 2)
                        timeTo = arrTo[0] + ":" + arrTo[1] + ":00"

                    if (toFrame == "") {
                        toFrame = "00";
                    }
                    $("#txtFrameTo_" + rowNo).val(FormatNumberLength(toFrame, 2));

                    if (returnVal) {
                        var totalSec_From = ConvertToSeconds(timeFrom);
                        var totalSec_To = ConvertToSeconds(timeTo);
                        var diffSec = totalSec_To - totalSec_From;
                        if (diffSec <= 0) {
                            if (!isIgnore) {
                                returnVal = false;
                            }
                            if (showError) {
                                if (!isIgnore) {
                                    $("#txtTo_" + rowNo).addClass('required');
                                    showAlert("E", "Invalid Duration");
                                    IsValidForTab = false;
                                }
                            }
                        }
                        if (returnVal && !validateOnly) {
                            var frameLimit = '24';
                            var durationFrame = 0;
                            if (parseInt(toFrame) < parseInt(fromFrame)) {
                                diffSec = diffSec - 1;
                                durationFrame = parseInt(frameLimit) - parseInt(fromFrame)
                                durationFrame = durationFrame + parseInt(toFrame);
                            }
                            else
                                durationFrame = parseInt(toFrame) - parseInt(fromFrame)

                            var balDuration = GetTimeInFormat(diffSec);
                            $("#txtDuration_" + rowNo).val(balDuration);
                            $("#txtDurationFrame_" + rowNo).val(FormatNumberLength(durationFrame, 2));
                        }
                    }
                    return returnVal;
                }
                else {

                    if (fromFrame != "00" || toFrame != "00") {

                        if (!validateOnly) {
                            var frameLimit = '24';
                            var durationFrame = 0;
                            if (parseInt(toFrame) < parseInt(fromFrame)) {
                                diffSec = diffSec - 1;
                                durationFrame = parseInt(frameLimit) - parseInt(fromFrame)
                                durationFrame = durationFrame + parseInt(toFrame);
                            }
                            else
                                durationFrame = parseInt(toFrame) - parseInt(fromFrame)

                            var balDuration = GetTimeInFormat(diffSec);
                            $("#txtDurationFrame_" + rowNo).val(FormatNumberLength(durationFrame, 2));
                        }
                    }

                    returnVal = true;
                }
            }
        }

        return returnVal;
    }
    function ConvertToSeconds(time) {
        var arr = time.split(':');
        var hr = parseInt(arr[0], 10) * 3600;
        var mm = parseInt(arr[1], 10) * 60;
        var ss = parseInt(arr[2], 10);
        var totsec = hr + mm + ss;
        return totsec;
    }
    function GetTimeInFormat(sec) {
        var val1;
        var val2;
        var hh = 00;
        var mm = 00;
        if (sec >= 3600) {
            val1 = parseFloat(sec) / 3600;
            hh = parseInt(val1, 10);
            sec = sec - (hh * 3600);
        }
        if (sec >= 60) {
            val2 = parseFloat(sec) / 60;
            mm = parseInt(val2, 10);
            sec = sec - (mm * 60);
        }

        var time = FormatNumberLength(hh, 2) + ':' + FormatNumberLength(mm, 2) + ':' + FormatNumberLength(sec, 2);
        return time;
    }
    function FormatNumberLength(num, length) {
        var r = "" + num;
        while (r.length < length) {
            r = "0" + r;
        }
        return r;
    }
   
    function ClosePopup() {
        $('#popupTalent').modal('hide');
        $('#pupupHtmlTalent').empty();
    }

    function ValidateMap() {
        var valid = true;
        var validdata = true;
        var tblOtherData = $("#tblOtherLogData tbody tr");
        
        $.each($(tblOtherData), function (index, value) {
            debugger
            var DMContentMusicCode = $(value).find('input[id*="hdnDMContentMusicCode_"]').val();
            valid = calculateDuration(DMContentMusicCode, true, true);
            if (!valid)
                validdata = false;

        });
        if (validdata) {
            SaveMappedData();
            var mappedCount = parseInt($('#hdnMappedCount').val());
            if (mappedCount > 0)
                MapData(false, fileType);
            else
                showAlert("E", "Please Map atleast one Record");
        }
    }
    function MapData(isConfirmed, fileType) {
        if (isConfirmed) {
            $.ajax({
                type: "POST",
                url: URL_MapData,
                enctype: 'multipart/form-data',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    fileType: fileType,
                    currentTab : $('#hdnTabName').val()
                }),
                async: false,
                success: function (result) {
                    if (result == "true") {
                        redirectToLogin();
                    }
                    else {
                        if (result.Status == "S") {
                            showAlert("S", result.Message);
                            //$("#divMappingData").empty();
                            BindGrid(true, false, '')
                        }
                        if (result.Status == "E") {
                            showAlert("E", result.Message);
                        }
                    }
                },
                error: function (result) {
                    alert('Error: ' + result.responseText);
                    hideLoading();
                }
            });
        }
        else {
            Command_Name = "MAP";
            showAlert("I", "Are you sure, you want to map data?", "OKCancel");
        }
    }
    function btnCancel() {
        var URL = '@Url.Action("Music_Program_Import", "Title_Content_ImportExport")';
        window.location.href = URL;
    }
    function btnMusicCancel() {
        $('.required').removeClass('required');
        $("[required='required']").removeAttr("required");
        $.ajax({
            type: "POST",
            url: URL_ClearSession,
            enctype: 'multipart/form-data',
            contentType: "application/json; charset=utf-8",
            async: false,
            success: function (result) {
                if (result == "true") {
                    redirectToLogin();
                }
                if (result.Status = "S") {
                    window.location.href = URL_Music_Title_Import;
                }
                else if (result.Status = "E") {
                    showAlert("E", result.Message);
                }
            },
            error: function (result) {
                alert('Error: ' + result.responseText);
                hideLoading();
            }
        });
    }
    function btnTitleCancel() {
        $('.required').removeClass('required');
        $("[required='required']").removeAttr("required");
        $.ajax({
            type: "POST",
            url: URL_ClearSession,
            enctype: 'multipart/form-data',
            contentType: "application/json; charset=utf-8",
            async: false,
            success: function (result) {
                if (result == "true") {
                    redirectToLogin();
                }
                if (result.Status = "S") {
                    window.location.href = URL_titleImport;
                }
                else if (result.Status = "E") {
                    showAlert("E", result.Message);
                }
            },
            error: function (result) {
                alert('Error: ' + result.responseText);
                hideLoading();
            }
        });
    }
</script>
<div class="container acq main_col">
    <div class="top_area">
        <div class="title_block  clearfix">
            <h2 class="pull-left">
                Resolve Conflict Content Music
                <span></span>
            </h2>
        </div>
    </div>
    <div class="grid_area">
        <div class="navigation_tabs">
            <span class="pull-left" id="lblTotal"></span>
            <input type="hidden" id="hdnMappedCount" value="0" />
            <input type="hidden" id="hdnTabName" value="CM" />
            <input type="hidden" id="hdnMasterImportCode" value="@Model.DM_Master_Import_Code" />
            <div class="tabbable">
                <ul class="nav nav-tabs nav-tab pull-left" id="ResolveConflictTab">
                    <li class="active">
                        <a data-toggle="tab"  role="tab" data-tabname="CM" >Music Title</a>
                    </li>
                    @*onclick="TabChange('CM');"*@
                    <li class="">
                        <a data-toggle="tab"  role="tab" data-tabname="OT">Others</a>
                    </li>
                    <li class="">
                        <a data-toggle="tab" role="tab" data-tabname="SM" >system Mapping</a>
                    </li>
                </ul>
                <div class="tab-content clearfix table-wrapper scale_table_container">
                    <div class="paging_area clearfix">
                        <span class="pull-left">Total Records: </span>
                        <span class="pull-left" id="lblRecordCount">@((ViewBag.RecordCount ?? 0))</span>
                        <input type="hidden" id="hdnPageNo" name="hdnPageNo" value="@((ViewBag.PageNo ?? 1))" />
                        <input type="hidden" id="hdnPagePerBatch" name="hdnPagePerBatch" value="5" />
                        <input type="hidden" id="hdnRecordCount" name="hdnRecordCount" value="@((ViewBag.RecordCount ?? 0))" />

                        <div id="Pagination" class="pagination">
                        </div>
                        <span class="pull-right">
                            Page Size:
                            <input type="text" id="txtPageSize" name="txtPageSize" class="smallTextBox pagingSize" value="@((ViewBag.PageSize ?? 10))"
                                   onchange="txtPageSize_OnChange('txtPageSize')" onblur="setDefaultPaging('txtPageSize')">
                        </span>
                    </div>
                    <div id="divMappingData"></div>
                </div>
                <br />
                <div class="bottom_action">
                  
                    <input type="button" id="btnMap" value="Map" class="btn btn-primary" onclick="return ValidateMap();" />                  
                     <input type="button" value="BACK" class="btn btn-primary" onclick="return btnCancel();" />
                </div>
            </div>

        </div>

    </div>
</div>