@model RightsU_Entities.DM_Master_Log
@using UTOFrameWork.FrameworkClasses;
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    var Command_Name = "", IsCall = 'Y';;
    var fileType = '@ViewBag.FileType';
    var URL_BindGrid = '@Url.Action("BindGrid", "DM_Title_Master_Import")';
    var URL_SaveMappedData = '@Url.Action("SaveMappedData", "DM_Title_Master_Import")';
    var URL_MapData = '@Url.Action("MapData", "DM_Title_Master_Import")';
    var URL_Music_Title_Import = '@Url.Action("Music_Title_Import", "Music_Title")';
    var URL_titleImport = '@Url.Action("titleImport", "Title")';
    var URL_PopulateAutoCompleteData = '@Url.Action("PopulateAutoCompleteData", "DM_Title_Master_Import")';
    var URL_ClearSession = '@Url.Action("ClearSession", "DM_Title_Master_Import")';
    var URL_ValidateTalnet = '@Url.Action("ValidateTalent", "DM_Title_Master_Import")';
    var IsValidForTab = true;
    var fileType = '@ViewBag.FileType';
    var FileStatus = '@ViewBag.FileStatus';
    $(document).ready(function () {
        addNumeric();
        if (FileStatus == "SR")
        {
            $('#rbdSystemMappedData').prop("checked", true);
        }
        $("input[name='MappedData']").on("click", function () {
            var valid = true;
            var MappedData = $('input[name=MappedData]:checked').val();
            valid = SaveMappedData();
            if (valid == true) {
                BindGrid(false, false, '', MappedData)
            }
            else {
                if (MappedData == "U") {
                    $("#rbdSystemMappedData").prop('checked', true);
                }
                else if(MappedData == "S")
                    $("#rdbUserMappedData").prop('checked', true);
               }
        });
        BindGrid(true, false, '', 'U');
        $('#ResolveConflictTab > li > a').on('click', function () {
            TabChange($(this).data('tabname'));
            var prevElm = $(this).parents('#ResolveConflictTab').find('li.active');
            if (!IsValidForTab) {
                $(this).removeClass('active');
                $(prevElm).addClass('active');
                IsValidForTab = true;
                return false;
            }
        });
        //SetPaging();
    });
    function handleOk() {
        if (Command_Name == "MAP") {
            MapData(true, fileType);
        }
        else {
            ValidateTalent();
        }
    }
    function handleCancel() {
        Command_Name = '';
    }
    function addNumeric() {
        $(".pagingSize").numeric({
            allowMinus: false,
            allowThouSep: false,
            allowDecSep: false,
            max: 99,
            min: 1
        });
    }
    function SetPaging() {
        debugger
        IsCall = 'N';
        var pageNo = 1, recordCount = 0, pagePerBatch = 0, recordPerPage = 0;
        pageNo = parseInt($('#hdnPageNo').val());
        recordCount = parseInt($('#hdnRecordCount').val());
        pagePerBatch = parseInt($('#hdnPagePerBatch').val());
        recordPerPage = parseInt($('#txtPageSize').val());

        var cnt = pageNo * recordPerPage;
        if (cnt >= recordCount) {
            var v1 = parseInt(recordCount / recordPerPage);
            if ((v1 * recordPerPage) == recordCount)
                pageNo = v1;
            else
                pageNo = v1 + 1;
        }

        if (pageNo == 0)
            pageNo = 1;

        var index = pageNo - 1;

        $('#hdnPageNo').val(pageNo);
        var opt = { callback: pageselectCallback };
        opt["items_per_page"] = recordPerPage;
        opt["num_display_entries"] = pagePerBatch;
        opt["num"] = 10;
        opt["prev_text"] = "<<";
        opt["next_text"] = ">>";
        opt["current_page"] = index;
        $("#Pagination").pagination(recordCount, opt);
    }
    function pageselectCallback(page_index, jq) {
        debugger
        $('.required').removeClass('required');

        if (!ValidatePageSize('txtPageSize'))
            return false;

        var pageNo = page_index + 1
        $('#hdnPageNo').val(pageNo);
        if (IsCall == 'Y') {
            SaveMappedData();
            var MappedData = $('input[name=MappedData]:checked').val();
            BindGrid(false, false, '', MappedData);
        }
        else
            IsCall = 'Y';
    }
    function txtPageSize_OnChange(txtID) {
        debugger
        $("[required='required']").removeAttr("required");
        $('.required').removeClass('required');
        if (!ValidatePageSize(txtID))
            return false;
        var MappedData = $('input[name=MappedData]:checked').val();
        BindGrid(false, false, '', MappedData);
        SetPaging();
    }
    function ValidatePageSize(txtID) {
        debugger
        var recordPerPage = $('#' + txtID).val()
        if ($.trim(recordPerPage) != '') {
            var pageSize = parseInt(recordPerPage);
            if (pageSize > 0)
                return true;
        }
        $('#' + txtID).attr('required', true)

        return false
    }
    function pageBinding() {
        debugger
        var MappedData = $('input[name=MappedData]:checked').val();
        BindGrid(false, false, '', MappedData);
        SetPaging();
    }
    function TabChange(tabName, DM_Master_Import_Code) {
        debugger
        var isValidate = true;
        isValidate = SaveMappedData();
        if (isValidate) {
            IsValidForTab = true;
            var previousTabName = $('#hdnTabName').val();
            $('#hdnTabName').val(tabName);
            var MappedData = $('input[name=MappedData]:checked').val();

            BindGrid(false, true, previousTabName, MappedData);
            SetPaging();
        }
    }
    function BindGrid(fetchData, isTabChanged, previousTabName, MappedData) {
        debugger
        $('.required').removeClass('required');
        $("[required='required']").removeAttr("required");

        var masterImportCode = $.trim($('#hdnMasterImportCode').val());
        var currentTabName = $.trim($('#hdnTabName').val());
        var pageNo = $('#hdnPageNo').val();
        var recordPerPage = $('#txtPageSize').val();
        var MappedData = $('input[name=MappedData]:checked').val();
        showLoading();
        $.ajax({
            type: "POST",
            url: URL_BindGrid,
            traditional: true,
            enctype: 'multipart/form-data',
            async: false,
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                masterImportCode: masterImportCode,
                fetchData: fetchData,
                isTabChanged: isTabChanged,
                currentTabName: currentTabName,
                previousTabName: previousTabName,
                pageNo: pageNo,
                recordPerPage: recordPerPage,
                MappedData: MappedData
            }),
            success: function (result) {
                if (result == "true") {
                    redirectToLogin();
                }
                else {
                    $("#divMappingData").empty();
                    $("#divMappingData").append(result);
                    if (MappedData == "S")
                    {
                        $('#btnMap').val("Verify And Map");
                    }
                    else {
                        $('#btnMap').val("Map");
                    }
                    var totalLength = $("input[id*='chkCreateNew']:checkbox").length;
                    var checkedLength = $("input[id*='chkCreateNew']:checkbox:checked").length;
                    $("input[id*='chkAll']:checkbox").prop('checked', (totalLength == checkedLength && checkedLength > 0));

                    var totaldisableLength = $("input[id*='chkCreateNew']:checkbox:disabled").length;
                    var checkeddisableLength = $("input[id*='chkCreateNew']:checkbox:disabled").length;
                    $("input[id*='chkAll']:checkbox").prop('disabled', (totaldisableLength == checkeddisableLength && checkeddisableLength > 0));


                    $("input[id*='chkCreateNew']:checkbox").click(function () {
                        var totalLength = $("input[id*='chkCreateNew']:checkbox").length;
                        var checkedLength = $("input[id*='chkCreateNew']:checkbox:checked").length;
                        $("input[id*='chkAll']:checkbox").prop('checked', (totalLength == checkedLength));
                        var txtMappedNameID = $(this)[0].id.replace('chkCreateNew', 'txtMappedName');
                        $("#" + txtMappedNameID).prop('disabled', false);
                        if ($(this).is(':checked'))
                            $("#" + txtMappedNameID).prop('disabled', true);

                    });

                    $("input[id*='chkAll']:checkbox").click(function () {
                        $("input[id*='chkCreateNew']:checkbox").prop('checked', $(this).is(':checked'));
                        $("input[id*='txtMappedName_']").prop('disabled', ($(this).is(':checked')));
                    });

                    var totalIsIgnoreLength = $("input[id*='chkIsIgnore']:checkbox").length;
                    var IsIgnoreCheckedLength = $("input[id*='chkIsIgnore']:checkbox:checked").length;
                    $("input[id*='IgnoreAll']:checkbox").prop('checked', (totalIsIgnoreLength == IsIgnoreCheckedLength && IsIgnoreCheckedLength > 0));

                    $("input[id*='chkIsIgnore']:checkbox").click(function () {
                        var totalIsIgnoreLength = $("input[id*='chkIsIgnore']:checkbox").length;
                        var IsIgnoreCheckedLength = $("input[id*='chkIsIgnore']:checkbox:checked").length;
                        $("input[id*='IgnoreAll']:checkbox").prop('checked', (totalIsIgnoreLength == IsIgnoreCheckedLength));
                        $("input[id*='chkAll']:checkbox").prop('disabled', (totalIsIgnoreLength == IsIgnoreCheckedLength));
                        var txtMappedNameID = $(this)[0].id.replace('chkIsIgnore', 'txtMappedName');
                        var chkCreateNewID = $(this)[0].id.replace('chkIsIgnore', 'chkCreateNew');
                        $("#" + txtMappedNameID).prop('disabled', false);
                        $("#" + chkCreateNewID).prop('disabled', false);
                        if ($(this).is(':checked')) {
                            $("#" + txtMappedNameID).prop('disabled', true);
                            if ($("#" + chkCreateNewID).is(':checked')) {
                                $("#" + chkCreateNewID).prop('checked', false)
                            }
                            if ($("input[id*='chkAll']:checkbox").is(':checked')) {
                                $("input[id*='chkAll']:checkbox").prop('checked', false);
                            }
                            $("#" + chkCreateNewID).prop('disabled', true);
                        }
                    });

                    $("input[id*='IgnoreAll']:checkbox").click(function () {
                        $("input[id*='chkIsIgnore']:checkbox").prop('checked', $(this).is(':checked'));
                        $("input[id*='txtMappedName_']").prop('disabled', ($(this).is(':checked')));
                        if ($("input[id*='chkCreateNew']:checkbox").is(':checked')) {
                            $("input[id*='chkCreateNew']:checkbox").prop('checked', false);
                        }
                        $("input[id*='chkCreateNew']:checkbox").prop('disabled', $(this).is(':checked'));
                        if ($("input[id*='chkAll']:checkbox").is(':checked')) {
                            $("input[id*='chkAll']:checkbox").prop('checked', false);
                        }
                        $("input[id*='chkAll']:checkbox").prop('disabled', $(this).is(':checked'));
                    });

                    initializeTooltip();
                    hideLoading();
                }
            },
            error: function (result) {
                alert(result);
            }
        });
    }
    function PopulateAutoCompleteData(masterLogCode, tabName, RoleName) {
        var keyword = $("#txtMappedName_" + masterLogCode).val();
        $("#txtMappedName_" + masterLogCode).autocomplete({
            focus: function () {
                return false;
            },
            search: function (e, u) {
                $(this).addClass('loader');
            },
            source: function (request, response) {
                $("#hdnMappedCode_" + masterLogCode).val('');
                var param = {
                    keyword: keyword,
                    tabName: tabName,
                    RoleName: RoleName
                };
                $.ajax({
                    url: URL_PopulateAutoCompleteData,
                    data: JSON.stringify(param),
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        if (data.length == 0) {
                            data[0] = 'Result Not Found';
                            response($.map(data, function (v, i) {
                                $("#txtMappedName_" + masterLogCode).removeClass('loader');
                                return {
                                    label: 'Result Not Found',
                                    val: '0'
                                }
                            }))
                        }
                        else {
                            response($.map(data, function (v, i) {
                                $("#txtMappedName_" + masterLogCode).removeClass('loader');
                                return {
                                    label: v.Mapping_Name,
                                    val: v.Mapping_Code
                                }
                            }))
                        }

                        //if (data.length == 0) {
                        //    data[0] = 'Result Not Found~0';
                        //}
                        //response($.map(data, function (v, i) {
                        //    return {
                        //        label: v.Mapping_Name,
                        //        val: v.Mapping_Code
                        //    }
                        //}))
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("Error" + textStatus);
                    }
                });
            },
            select: function (event, ui) {
                $("#hdnMappedCode_" + masterLogCode).val(ui.item.val);
                if (ui.item.val == '0') {
                    return false;
                }
            },
            minLength: 2,
            open: function (event, ui) {
                $(".ui-autocomplete").css("position", "absolute");
                $(".ui-autocomplete").css("max-height", "200px");
                $(".ui-autocomplete").css("max-width", "250px");
                $(".ui-autocomplete").css("overflow-y", "auto");
                $(".ui-autocomplete").css("overflow-x", "hidden");
                $(".ui-autocomplete").css("z-index", "2147483647");
            },
        });
    }
    function SaveMappedData() {
        debugger
        var isvalid = true;
        var lstDM_MasterLog = new Array();
        var lstSystemMapLog = new Array();
        var tblData = $("#tblMasterLogData tbody tr");
        var tblSystemMappedDta = $("#tblSystemMappedMasterLogData tbody tr");
        $.each($(tblData), function (index, value) {
            var masterLogCode = $(value).find('input[id*="hdnMasterLogCode_"]').val();
            var isChecked = $(value).find('input[id*="chkCreateNew_"]').prop('checked');
            var isIgnoreChecked = $(value).find('input[id*="chkIsIgnore_"]').prop('checked');
            var mappedName = $(value).find('input[name="MappedName"]').val();
            var mappedCode = $(value).find('input[name="MappedCode"]').val();
            if (isChecked || isIgnoreChecked)
                var mappedCode = 0;

            lstDM_MasterLog.push({
                Mapped_Name: mappedName, Mapped_Code: mappedCode, Is_Create_New: isChecked, DM_Master_Log_Code: masterLogCode, IsIgnore: isIgnoreChecked
            });
        });
        $.each($(tblSystemMappedDta), function (index, value) {
            var mappedCode = "", SystemMappedName= "", systemMappedCode = "";
            var masterLogCode = $(value).find('input[id*="hdnSystemMappingMasterLogCode_"]').val();
            //var isChecked = $(value).find('input[id*="chkCreateNew_"]').prop('checked');
            var mappedName = $(value).find('input[name="MappedName"]').val();
            if (mappedName == undefined) {
                SystemMappedName = $('#lblMappedName_' + masterLogCode).text();
            }
            if (mappedName == "") {
                $('#txtSystemMappedName_' + masterLogCode).attr('required', true);
                IsValidForTab = false;
                isvalid = false;
                return false;
            }
            mappedCode = $(value).find('input[name="MappedCode"]').val();
            if (mappedCode == "") {
                systemMappedCode = $('#lblMappedCode_' + masterLogCode).text();
            }
            lstSystemMapLog.push({
                Mapped_Name: mappedName, Mapped_Code: mappedCode, DM_Master_Log_Code: masterLogCode, System_Mapped_Name :SystemMappedName, System_Mapped_Code : systemMappedCode
            });
        });
        if (isvalid) {
            if (lstDM_MasterLog.length > 0 || lstSystemMapLog.length > 0) {
                $.ajax({
                    type: "POST",
                    url: URL_SaveMappedData,
                    enctype: 'multipart/form-data',
                    contentType: "application/json; charset=utf-8",
                    data: JSON.stringify({
                        lst: lstDM_MasterLog,
                        lstSystemMapLog: lstSystemMapLog
                    }),
                    async: false,
                    success: function (result) {
                        if (result == "true") {
                            redirectToLogin();
                        }
                        else {

                            $('#hdnMappedCount').val(result.MappedCount);
                            if (result.Status == "E") {
                                showAlert("E", result.Message);
                            }
                        }
                    },
                    error: function (result) {
                        alert('Error: ' + result.responseText);
                        hideLoading();
                    }
                });
            }
        }
        return isvalid;
    }
    function MapImportData() {
        Command_Name = "";
        showAlert("I", 'Are you sure, you verify all system mapped data?', "OKCANCEL");
            }
    //function handleOk() {
    //    debugger
    //    ValidateTalent();
    //}
    //function handleCancel() {
    //    return false;
    //}
    function ValidateTalent() {
        var isValid = true;
        var lstDM_MasterLog = new Array();
        var tblData = $("#tblMasterLogData tbody tr");
        $.each($(tblData), function (index, value) {
            var masterLogCode = $(value).find('input[id*="hdnMasterLogCode_"]').val();
            var isChecked = $(value).find('input[id*="chkCreateNew_"]').prop('checked');
            var mappedName = $(value).find('input[name="MappedName"]').val();
            var mappedCode = $(value).find('input[name="MappedCode"]').val();
            if (isChecked)
                var mappedCode = 0;

            lstDM_MasterLog.push({
                Mapped_Name: mappedName, Mapped_Code: mappedCode, Is_Create_New: isChecked, DM_Master_Log_Code: masterLogCode
            });
        });

        $.ajax({
            type: "POST",
            url: URL_ValidateTalnet,
            enctype: 'multipart/form-data',
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            async: false,
            data: JSON.stringify({
                lst: lstDM_MasterLog
            }),
            success: function (result) {
                if (result == "true") {
                    redirectToLogin();
                }
                if (result.trim() != '') {
                    $('#pupupHtmlTalent').empty();
                    $('#pupupHtmlTalent').html(result);

                    isValid = true;
                }
                else
                    isValid = false;
                initializeExpander();
            },
            error: function (x, e) {
            }
        });
        if (isValid) {
            $('#popupTalent').modal();
            initializeChosen();
        }
        else {
            ValidateMap();
        }
    }
    function ClosePopup() {
        $('#popupTalent').modal('hide');
        $('#pupupHtmlTalent').empty();
    }

    function ValidateMap() {
        var isValidate = true;
        isValidate = SaveMappedData();
        if (isValidate) {
            IsValidForTab = true;

            var mappedCount = parseInt($('#hdnMappedCount').val());
            if (mappedCount > 0)
                MapData(false, fileType);
            else
                showAlert("E", "Please Map atleast one Record");
        }
    }
    function MapData(isConfirmed, fileType) {
        if (isConfirmed) {
            $.ajax({
                type: "POST",
                url: URL_MapData,
                enctype: 'multipart/form-data',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({
                    fileType: fileType
                }),
                async: false,
                success: function (result) {
                    if (result == "true") {
                        redirectToLogin();
                    }
                    else {
                        if (result.Status == "S") {
                            showAlert("S", result.Message);
                            $("#divMappingData").empty();
                            var MappedData = $('input[name=MappedData]:checked').val();

                            BindGrid(true, false, '', MappedData)
                        }
                        if (result.Status == "E") {
                            showAlert("E", result.Message);
                        }
                    }
                },
                error: function (result) {
                    alert('Error: ' + result.responseText);
                    hideLoading();
                }
            });
        }
        else {
            Command_Name = "MAP";
            showAlert("I", "Are you sure, you want to map data?", "OKCancel");
        }
    }
    function btnMusicCancel() {
        $('.required').removeClass('required');
        $("[required='required']").removeAttr("required");
        $.ajax({
            type: "POST",
            url: URL_ClearSession,
            enctype: 'multipart/form-data',
            contentType: "application/json; charset=utf-8",
            async: false,
            success: function (result) {
                if (result == "true") {
                    redirectToLogin();
                }
                if (result.Status = "S") {
                    window.location.href = URL_Music_Title_Import;
                }
                else if (result.Status = "E") {
                    showAlert("E", result.Message);
                }
            },
            error: function (result) {
                alert('Error: ' + result.responseText);
                hideLoading();
            }
        });
    }
    function btnTitleCancel() {
        $('.required').removeClass('required');
        $("[required='required']").removeAttr("required");
        $.ajax({
            type: "POST",
            url: URL_ClearSession,
            enctype: 'multipart/form-data',
            contentType: "application/json; charset=utf-8",
            async: false,
            success: function (result) {
                if (result == "true") {
                    redirectToLogin();
                }
                if (result.Status = "S") {
                    window.location.href = URL_titleImport;
                }
                else if (result.Status = "E") {
                    showAlert("E", result.Message);
                }
            },
            error: function (result) {
                alert('Error: ' + result.responseText);
                hideLoading();
            }
        });
    }
</script>
<div class="container acq main_col">
    <div class="top_area">
        <div class="title_block  clearfix">
            @if (ViewBag.FileType == "M")
            {
                <h2 class="pull-left">
                    Resolve Conflict Music
                    <span></span>
                </h2>
            }
            @if (ViewBag.FileType == "T")
            {
                <h2 class="pull-left">
                    Resolve Conflict Title
                    <span></span>
                </h2>
            }

        </div>
    </div>
    <div class="grid_area">
        <div class="navigation_tabs">
            <span class="pull-left" id="lblTotal"></span>
            <input type="hidden" id="hdnMappedCount" value="0" />
            <input type="hidden" id="hdnMasterImportCode" value="@Model.DM_Master_Import_Code" />
            <div class="tabbable">
                <ul class="nav nav-tabs nav-tab pull-left" id="ResolveConflictTab">
                    @if (ViewBag.FileType == "M")
                    {
                        <li class="active">
                            <input type="hidden" id="hdnTabName" value="TA" />
                            <a data-toggle="tab" role="tab" data-tabname="TA">Talent</a>
                        </li>

                        <li class="">
                            <a data-toggle="tab" role="tab" data-tabname="LB">Music Label</a>
                        </li>
                        <li class="">
                            <a data-toggle="tab" data-tabname="GE" role="tab">Genres</a>
                        </li>
                        <li class="">
                            <a data-toggle="tab" data-tabname="MA" role="tab">Movie/Album</a>
                        </li>
                        <li class="">
                            <a data-toggle="tab" data-tabname="ML" role="tab">Language</a>
                        </li>
                        <li class="">
                            <a data-toggle="tab" data-tabname="MT" role="tab">Theme</a>
                        </li>
                    }
                    @if (ViewBag.FileType == "T")
                    {
                        int Count = 0;
                        foreach (RightsU_Entities.DM_Title_Resolve_Conflict objDTRC in ViewBag.DM_Title_RC_Lst)
                        {
                            if (ViewBag.ShortName.Contains(objDTRC.Master_Type))
                            {
                                <li class="@(Count == 0 ? "active" : "")">
                                    @if (Count == 0)
                                    {
                                        <input type="hidden" id="hdnTabName" value="@objDTRC.Master_Type" />
                                    }
                                    <a data-toggle="tab" role="tab" data-tabname="@objDTRC.Master_Type">@objDTRC.Tab_Name</a>
                                </li>
                                Count = Count + 1;
                            }
                        }
                    }
                </ul>
                @*BindGrid(false, false, '', 'U');*@
                <div class="pull-right">
                    <input type="radio" id="rdbUserMappedData" value="U" name="MappedData" checked="checked" />User Mapped Data
                    <input type="radio" id="rbdSystemMappedData" value="S" name="MappedData" />System Mapped Data
                </div>
                <div class="tab-content clearfix table-wrapper scale_table_container">
                    <div class="paging_area clearfix">
                        <span class="pull-left">Total Records: </span>
                        <span class="pull-left" id="lblRecordCount">@((ViewBag.RecordCount ?? 0))</span>
                        <input type="hidden" id="hdnPageNo" name="hdnPageNo" value="@((ViewBag.PageNo ?? 1))" />
                        <input type="hidden" id="hdnPagePerBatch" name="hdnPagePerBatch" value="5" />
                        <input type="hidden" id="hdnRecordCount" name="hdnRecordCount" value="@((ViewBag.RecordCount ?? 0))" />

                        <div id="Pagination" class="pagination">
                        </div>
                        <span class="pull-right">
                            Page Size:
                            <input type="text" id="txtPageSize" name="txtPageSize" class="smallTextBox pagingSize" value="@((ViewBag.PageSize ?? 25))"
                                   onchange="txtPageSize_OnChange('txtPageSize')" onblur="setDefaultPaging('txtPageSize')">
                        </span>
                    </div>
                    <div id="divMappingData"></div>
                </div>
                <br />
                <div class="bottom_action">
                    @*<input type="button" id="btnMap" value="Map" class="btn btn-primary" onclick="return ValidateMap();" />*@
                    <input type="button" id="btnMap" value="Map" class="btn btn-primary" onclick="MapImportData();" />
                    @if (ViewBag.FileType == "M")
                    {
                        <input type="button" value="BACK" class="btn btn-primary" onclick="return btnMusicCancel();" />
                    }
                    @if (ViewBag.FileType == "T")
                    {
                        <input type="button" value="BACK" class="btn btn-primary" onclick="return btnTitleCancel();" />
                    }
                </div>
            </div>

        </div>

    </div>
</div>
<div aria-labelledby="myModalLabel" class="form_wrapper modal fade small_popup in" id="popupTalent" role="dialog" tabindex="-1" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content clearfix" style="border-radius:0px!important">
            <div class="form_fields acq" id="pupupHtmlTalent">

            </div>
        </div>
    </div>
</div>

<style>
    #popupTalent {
        max-width: 600px;
        overflow-y: auto;
    }

    .loader {
        background: url('../../Images/ajax-loader.gif');
        background-repeat: no-repeat;
        background-position: right;
    }
</style>
