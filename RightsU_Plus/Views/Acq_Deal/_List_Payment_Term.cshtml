@model List<RightsU_Entities.USP_List_Acq_PaymentTerms_Result>
@{
    MessageKey objMessageKey = new MessageKey();
    if (Session["objMessageKey"] != null)
    {
        objMessageKey = (MessageKey)Session["objMessageKey"];
    }
}

<style>
    #ddl_Payment_Term_Code_chosen {
        max-width: 450px;
    }

    #ddl_Cost_Type_Code_chosen {
        max-width: 188px;
    }

    /*#ddl_Payment_Term_Code_chosen {
        width: 92% !important;
    }*/
    ddl_Cost_Type_Code_0_chosen{
        width:60px;
    }
</style>
<script>
    var URL_CTCODE = '@Url.Action("CostTypeAmount", "Acq_Payment_Term")';
    $(document).ready(function () {
        debugger;
        var i = 1;
        if ('@objMessageKey.LayoutDirection' == "RTL")
        {
            $('#btnAddPYT').css("float", "left");
        }
        else {
            $('#btnAddPYT').css("float", "right");
        }
        if ('@ViewBag.CommandName' == 'Add') {
            $('#ddl_Cost_Type_Code_0_chosen').css("width", "60%");
            $('#txtAmountSR_0').css("width", "59px");
            $('#txtPercentageSR_0').css("width", "60px");
        }
        else {
            $('#ddl_Cost_Type_Code_' + i + '_chosen').css("width", "60%");
            $('#txtAmountSR_'+ i).css("width", "59px");
            $('#txtPercentageSR_' + i).css("width", "60px");
        }
        if ($('#Pagination'))
            SetPaging();

        $("#txtPageSize").numeric({
            allowMinus: false,
            allowThouSep: false,
            allowDecSep: false,
            maxDigits: 2
        });
        initializeExpander();
    });


    function RemoveComa(s) {
        var s1 = '';

        while (s.indexOf(',') != -1) {
            s = s.replace(',', '');
        }

        return s;
    }
    var tmp_ValidatePaymentTerm = 0;


    function ValidPaymentTermOnAmount(strRowIndex) {
        debugger;
        if ('@ViewBag.CommandName' == 'Edit') {
            CostTypeEDIT();
        }
        
        //RemoveReqClass();
        tmp_ValidatePaymentTerm = 0;
        var SelectedddlFCostTypeCode = $('#ddl_Cost_Type_Code_' + strRowIndex).val();
        var ValtxtFAmount = $('#txtAmountSR_' + strRowIndex).val();

        ValtxtFAmount = RemoveComa(ValtxtFAmount);
        var cnt = 0;
        var tCount = 0;

        /*---Collect Variable Cost Details---*/
        var StandardReturns = $("#TableMain tr:not(:has(th),.hide)");
        var i = 1;
        StandardReturns.each(function (rowId_outer) {
            var Amount = 0, CostType = 0;

            lblAmount = $("#lblAmountSR" + i);
            hdnCostType = $("#hdnCostTypeCode_" + i);

            if (lblAmount != null && hdnCostType != null) {
                if (RemoveComa(lblAmount.text()) != "") {
                    if (parseFloat(SelectedddlFCostTypeCode) > 0 && parseFloat(SelectedddlFCostTypeCode) == parseFloat(hdnCostType.val()))
                        tCount = parseFloat(tCount) + parseFloat(RemoveComa(lblAmount.text()));
                }
            }

            i = i + 1;
        });
        /*------------------------------------*/

        /*-------Collect Cost Type------------*/
        var CostType = $("#TableMain tr:not(:has(th),.hide)");
        if ('@ViewBag.CommandName' == 'Add') {
            var ctCnt = 0;
        }
        else { var ctCnt = 1;}
        
        CostType.each(function (ctrowId_Outer) {
            debugger;
            var CostTypeCode = 0, CostTypeAmt = 0;
            CostTypeCode = $('#hdn_CostTypeCode_' + ctCnt).val();
            CostTypeAmt = $('#hdn_BudgetedAmt_' + ctCnt).val();
            //CostTypeCode = CTCODE;
            //CostTypeAmt = CTAMT;

            if (CostTypeCode > 0) {
                if (CostTypeCode == SelectedddlFCostTypeCode && CostTypeCode > 0) {
                    if ((parseFloat(ValtxtFAmount) + parseFloat(tCount)) > parseFloat(CostTypeAmt)) {
                        tmp_ValidatePaymentTerm = 1;
                        return false;
                    }
                    else {
                        var calPerc = parseFloat(parseFloat(ValtxtFAmount) / (parseFloat(CostTypeAmt)));

                        if (isNaN(calPerc))
                            calPerc = 0;
                        calPerc = parseFloat(calPerc * 100);

                        if (parseInt(calPerc) <= 100) {
                            if (isNaN(ValtxtFAmount))
                                ValtxtFAmount = 0;
                            //addCommas(ValtxtFAmount);
                            $('#txtAmountSR_' + strRowIndex).val(ValtxtFAmount);
                            $('#txtPercentageSR_' + strRowIndex).val(calPerc.toFixed(2));

                        }

                    }
                }
            }
            ctCnt = ctCnt + 1;
        });
        /*-------------------------------------*/
    }

    function ValidPaymentTermOnPercentage(strRowIndex) {
        debugger;
      if ('@ViewBag.CommandName' == 'Edit') {
            CostTypeEDIT();
        }
        tmp_ValidatePaymentTerm = 0;
        //RemoveReqClass();
        //var rblECommissionType = document.getElementById(strRowIndex + 'rblCommissionType');
        var SelectedddlFCostTypeCode = $('#ddl_Cost_Type_Code_' + strRowIndex).val();
        var ValtxtFAmount = $('#txtPercentageSR_' + strRowIndex).val();

        if (parseFloat(ValtxtFAmount) > 100) {
            //showAlert('E','Percentage should not be more than 100');
            return false;
        }
        ValtxtFAmount = RemoveComa(ValtxtFAmount);

        /*---Collect Variable Cost Details---*/
        var StandardReturns = $("#TableMain tr:not(:has(th),.hide)");
        var i = 1;
        var tCount = 0;
        StandardReturns.each(function (rowId_outer) {
            var Amount = 0, CostType = 0;

            lblAmount = $("#lblAmountSR" + i);
            hdnCostType = $("#hdnCostTypeCode_" + i);

            if (lblAmount != null && hdnCostType != null) {
                if (lblAmount.text() != "") {
                    if (parseFloat(SelectedddlFCostTypeCode) > 0 && parseFloat(SelectedddlFCostTypeCode) == parseFloat(hdnCostType.val()))
                        tCount = parseFloat(tCount) + parseFloat(RemoveComa(lblAmount.text()));
                }
            }

            i = i + 1;
        });
        /*------------------------------------*/

        /*-------Collect Cost Type------------*/
        var CostType = $("#TableMain tr:not(:has(th),.hide)");
        if ('@ViewBag.CommandName' == 'Add') {
            var ctCnt = 0;
        }
        else { var ctCnt = 1; }
        CostType.each(function (ctrowId_Outer) {
            debugger;
            var CostTypeCode = 0, CostTypeAmt = 0;
            CostTypeCode = $('#hdn_CostTypeCode_' + ctCnt).val();
            CostTypeAmt = $('#hdn_BudgetedAmt_' + ctCnt).val();
            if (CostTypeCode == undefined) {
                CostTypeCode = 0;
            }

            if (CostTypeCode > 0) {
                if (CostTypeCode == SelectedddlFCostTypeCode && CostTypeCode > 0) {
                    if ((parseFloat(ValtxtFAmount) + parseFloat(tCount)) > 100) {
                        //showAlert('E','Percentage should not be more than 100')
                        return false;
                    }
                    else {
                        //var calPerc = parseFloat(parseFloat(ValtxtFAmount) / (parseFloat(CostTypeAmt)));
                        //calPerc = parseFloat(calPerc / 100);
                        //if (isNaN(calPerc))
                        //  calPerc = 0;

                        if (parseInt(ValtxtFAmount) <= 100) {
                            //addCommas(ValtxtFAmount);
                            calPerc = ValtxtFAmount;

                            var CalAmt = parseFloat((parseFloat(calPerc) * parseFloat(CostTypeAmt)) / 100);
                            if (isNaN(CalAmt))
                                CalAmt = 0;
                            $('#txtAmountSR_' + strRowIndex).val(CalAmt.toFixed(2));
                            $('#txtPercentageSR_' + strRowIndex).val(ValtxtFAmount);
                        }

                    }
                }
            }
            ctCnt = ctCnt + 1;
        });
    }



    var IsCall = 'Y';
    function SetPaging() {
        debugger;
        IsCall = 'N';
        var PageNo, recordCnt, pageSize = 10;

        if ('@ViewBag.PageNo' != null)
            PageNo = '@ViewBag.PageNo';

        if ('@ViewBag.RecordCount' != null)
            recordCnt = '@ViewBag.RecordCount';

        if ('@ViewBag.pageSize' != null) {
            pageSize = '@ViewBag.pageSize';
            $('#txtPageSize').val(pageSize);
        }
        else
            pageSize = $('#txtPageSize').val();

        PageNo = PageNo - 1;

        var opt = { callback: pageselectCallback };
        opt["items_per_page"] = pageSize;
        opt["num_display_entries"] = 5;
        opt["num"] = 10;
        opt["prev_text"] = "<<";
        opt["next_text"] = ">>";
        opt["current_page"] = PageNo;
        $("#Pagination").pagination(recordCnt, opt);
    }
    function pageselectCallback(page_index, jq) {
        debugger;
        var pageSize = $('#txtPageSize').val();
        if (IsCall == 'Y') {
            LoadAcqDealPayment(page_index, 'N');
        }
        else
            IsCall = 'Y';
    }

    function ValidatePageSize() {
        var recordPerPage = $('#txtPageSize').val()
        if ($.trim(recordPerPage) != '') {
            var pageSize = parseInt(recordPerPage);
            if (pageSize > 0)
                return true;
        }
        $('#txtPageSize').addClass("required");

        return false
    }

    function txtPageSize_OnChange() {
        $('.required').removeClass('required');
        $("[required='required']").removeAttr("required");

        if (!ValidatePageSize())
            return false;

        LoadAcqDealPayment(0, 'N');
        //SetPaging();
    }
    function pageBinding() {
        LoadAcqDealPayment(0, 'N');
    }
    function CostTypeADD() {
        debugger;
        var costtypecode =  $('#ddl_Cost_Type_Code_0').val()
            $.ajax({
                type: "POST",
                url: URL_CTCODE,
                traditional: true,
                enctype: 'multipart/form-data',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    CostTypeCode : costtypecode
                }),
                success: function (result) {
                    debugger;
                    if (result == "true") {
                        redirectToLogin();
                    }
                    else {
                        hideLoading();
                        initializeTooltip();
                        $('#hdn_BudgetedAmt_0').val(result.Amount);
                        $('#hdn_CostTypeCode_0').val(result.CTCode);
                    }
                },
                error: function (result) {
                    alert('Error: ' + result.responseText);
                }
            });
    }

    function CostTypeEDIT() {
        debugger;
        var i = 1;
        var costtypecode = $('#ddl_Cost_Type_Code_' + i).val()
            $.ajax({
                type: "POST",
                url: URL_CTCODE,
                traditional: true,
                enctype: 'multipart/form-data',
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                data: JSON.stringify({
                    CostTypeCode: costtypecode
                }),
                success: function (result) {
                    debugger;
                    if (result == "true") {
                        redirectToLogin();
                    }
                    else {
                        hideLoading();
                        initializeTooltip();
                        $('#hdn_BudgetedAmt_' + i).val(result.Amount);
                        $('#hdn_CostTypeCode_' + i).val(result.CTCode);
                    }
                },
                error: function (result) {
                    alert('Error: ' + result.responseText);
                }
            });   
    }
</script>
<div class="paging_area clearfix">
    <span class="pull-left">@objMessageKey.TotalRecords:  @ViewBag.RecordCount</span>
    <div class="pagination" id="Pagination"></div>
    <span class="pull-right">
        @objMessageKey.PageSize:
        <input type="text" class="smallTextBox" value="" id="txtPageSize" onchange="txtPageSize_OnChange()" onblur="setDefaultPaging('txtPageSize')">
    </span>
    @if (ViewBag.PageMode != "V" && ViewBag.PageMode != "APRV" && ViewBag.PageMode != "EWOA")
    {
        <a class="btn btn-primary" id="btnAddPYT" title="@objMessageKey.AddPaymentTerm" onclick="return AddCancelPaymentTerms(1);">@objMessageKey.Add</a>}
</div>
<table class="table table-bordered table-hover" id="TableMain">
    <thead>
        <tr>
            @if (ViewBag.PageMode != "V" && ViewBag.PageMode != "APRV" && ViewBag.PageMode != "EWOA")
            {
                <th style="width: 30%;">@objMessageKey.PaymentTerm</th>
                <th style="width: 20%;" class="longTH">@objMessageKey.DaysbeforeorafterMilestone</th>
                <th style="width: 30%;">@objMessageKey.PercentageAmount</th>
                <th style="width: 10%;">@objMessageKey.DueDate</th>
                <th style="width: 10%;">@objMessageKey.Action</th>
            }
            else
            {
                <th style="width: 30%;">@objMessageKey.PaymentTerm</th>
                <th style="width: 20%;" class="longTH">@objMessageKey.DaysbeforeorafterMilestone</th>
                <th style="width: 30%;">@objMessageKey.PercentageAmount</th>
                <th style="width: 20%;">@objMessageKey.DueDate</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (ViewBag.CommandName != "Edit")
        {
            if (Model != null)
            {
                int count = 0;
                foreach (var item in Model)
                {
                    count++;
                    <tr id="trList">
                        @{string dt = "";
                            if (Convert.ToDateTime(item.Due_Date) == DateTime.MinValue)
                            {
                                dt = "";
                            }
                            else
                            {
                                dt = Convert.ToDateTime(item.Due_Date).ToString("dd/MM/yyyy");
                            }}
                        <td>
                            <label for="Payment_Terms1" id="Payment_Terms1">@item.Payment_Terms</label>
                            <label for="Payment_Terms_Code" value="@item.Payment_Term_Code" style="display:none;" id="Payment_Terms_Code">@item.Payment_Term_Code</label>
                            <label for="Cost_Type_Code" value="@item.Cost_Type_Code" style="display:none;" id="Cost_Type_Code">@item.Cost_Type_Code</label>
                        </td>
                        <td>
                            <label for="Days_After" id="Days_After">@item.Days_After</label>
                        </td>
                        <td>
                            
                            <div style="width:60%; float:left;"><label for="Cost_Type_Name" id="Cost_Type_Name">@item.Cost_Type_Name</label></div>
                            <div style="width:133px; float:right;">
                                <label for="Amount" id="Amount">@item.Amount</label>&nbsp;&nbsp;&nbsp;
                                <label for="Percentage" id="Percentage">@item.Percentage</label>
                                <span id="percentageSign">%</span> &nbsp;&nbsp;
                            </div>
                        </td>
                        <td>
                            @dt
                        </td>
                        @if (ViewBag.PageMode != "V" && ViewBag.PageMode != "EWOA" && ViewBag.PageMode != "APRV")
                        {
                            <td align="center">
                                @Html.HiddenFor(modalitem => item.Acq_Deal_Payment_Terms_Code)
                                <a title="@objMessageKey.Edit" href="#" class="glyphicon glyphicon-pencil" onclick="EditPaymentTerm(@item.Acq_Deal_Payment_Terms_Code)"></a>
                                <a title="@objMessageKey.Delete" href="#" class="glyphicon glyphicon-trash" onclick="return OnDeleteClick(@item.Acq_Deal_Payment_Terms_Code);"></a>
                            </td>
                        }
                    </tr>
                }
            }
        }
        @if (ViewBag.CommandName == "Add")
        {
            <tr>
                <td>
                    @Html.DropDownList("Payment_Term_Code", (List<SelectListItem>)ViewBag.Payment_Terms_List, new { style = "width:230px;", @class = "form_input chosen-select", @id = "ddl_Payment_Term_Code" })
                    @if (ViewBag.UserModuleRights.Contains("~" + UTOFrameWork.FrameworkClasses.GlobalParams.RightCodeForPaymentTermAdd + "~"))
    {
                <a class="red_icon glyphicon glyphicon-plus" title="@objMessageKey.AddProgram" onclick="AddPaymentTerm();" />
}
                </td>
                <td>
                    @Html.TextBox("Days_After", "", new { @class = "numberDaysText", style = "width:40px;", maxlength = 3, @id = "txt_Days_After" })
                </td>
                @{ 
                    var Cost_Type_Code = Model.Select(s => s.Cost_Type_Code).FirstOrDefault();
                    //var Cost_Type_Amount = Model.Select(s => s.Cost_Type_Amount).FirstOrDefault();
                }
                <td>
                    @*@Html.DropDownList("Cost_Type_Code", (List<SelectListItem>)ViewBag.Cost_Type_List, new { style = "width:70px;", @class = "form_input chosen-select", onchange = "return validatePercent(txt_Percentage, this, ddl_Payment_Term_Code);", @id = "ddl_Cost_Type_Code_0" })*@
                    @*@Html.TextBox("Percentage", "", new { @class = "numberText", style = "width:60px;", Title = "Percentage", maxlength = 7, onchange = "return validatePercent(this, ddl_Cost_Type_Code, ddl_Payment_Term_Code);", @id = "txt_Percentage" })
        @Html.TextBox("Amount", "", new { @class = "numberText", style = "width:60px;", Title = "Amount", maxlength = 7, onchange = "return validatePercent(this, ddl_Cost_Type_Code, ddl_Payment_Term_Code);", @id = "txt_Percentage" })*@

                    @Html.DropDownList("Cost_Type_Code", (List<SelectListItem>)ViewBag.Cost_Type_List, new { style = "width:70px;", @class = "form_input chosen-select", onchange = "return CostTypeADD()", @id = "ddl_Cost_Type_Code_0" })
                    <input class="text text-right" id="txtAmountSR_0" type="text" title="Amount"  value="" onkeyup="ValidPaymentTermOnAmount(0)" />
                    <input class="text" id="txtPercentageSR_0" type="text"  value="" title="Percentage" onkeyup="ValidPaymentTermOnPercentage(0)" />
                    @Html.Hidden("hdn_CostTypeCode_0", Model.Select(s=>s.Cost_Type_Code).FirstOrDefault())
                    @Html.Hidden("hdn_BudgetedAmt_0")
                </td>
                <td>
                    @Html.TextBox("Due_Date", "", new { @class = "isDatepicker shortDate", @placeholder = "DD/MM/YYYY" })
                </td>
                <td align="center">
                    @*<input type="image" class="glyphicon glyphicon-ok-circle" title="Save" onclick="return checkForsave(0);" />*@
                    <a title="@objMessageKey.Save" href="#" class="glyphicon glyphicon-ok-circle" onclick="return checkForsave(0);"></a>
                    <a title="@objMessageKey.Cancel" href="#" class="glyphicon glyphicon-remove-circle" onclick="AddCancelPaymentTerms(0)"></a>
                </td>
            </tr>
        }
        @if (Model != null && ViewBag.CommandName == "Edit")
                    {
                        int count = 0;
                        int i = 1;
                        foreach (var item in Model)
                        {
                            count++;
                            if (ViewBag.Acq_Deal_Payment_Terms_Code == item.Acq_Deal_Payment_Terms_Code)
                            {
                                if (ViewBag.CommandName == "Edit")
                                {
                        <tr>
                                        @{string dt = "";
                                        if (Convert.ToDateTime(item.Due_Date) == DateTime.MinValue)
                                        {
                                            dt = "";
                                        }
                                        else
                                        {
                                            dt = Convert.ToDateTime(item.Due_Date).ToString("dd/MM/yyyy");
                                        }}
                            <td>
                                @Html.Hidden("Acq_Deal_Payment_Terms_Code", item.Acq_Deal_Payment_Terms_Code)
                                @Html.DropDownList("Payment_Term_Code", (List<SelectListItem>)ViewBag.Payment_Terms_List, new { style = "width:230px;", @class = "form_input chosen-select", @id = "ddl_Payment_Term_Code" })
                                @if (ViewBag.UserModuleRights.Contains("~" + UTOFrameWork.FrameworkClasses.GlobalParams.RightCodeForPaymentTermAdd + "~"))
    {
                            <a class="red_icon glyphicon glyphicon-plus" title="@objMessageKey.AddProgram" onclick="AddPaymentTerm();" />
}
                            </td>
                            <td>
                                @Html.TextBox("Days_After", item.Days_After, new { @class = "smallTextBox numberDaysText", maxlength = 3, @id = "txt_Days_After" })
                            </td>
                            <td>
                                @Html.DropDownList("Cost_Type_Code", (List<SelectListItem>)ViewBag.Cost_Type_List, new { style = "width:200px;", @class = "form_input chosen-select", onchange = "return CostTypeEDIT()", @id = "ddl_Cost_Type_Code_"+ i })
                                @*@Html.TextBox("Percentage", item.Percentage, new { @class = "numberText", @style = "width:60px;", @maxlength = 7, @onchange = "return validatePercentOnEdit(this, ddl_Cost_Type_Code, ddl_Payment_Term_Code);", @id = "txt_Percentage" })*@
                                @Html.TextBox("Amount", item.Amount, new { @id = "txtAmountSR_" + i, @class = "text-right",@title= "Amount", @onkeyup = "ValidPaymentTermOnAmount(" + i + ")" })
                                @Html.TextBox("Percentage", item.Percentage, new { @id = "txtPercentageSR_" + i, @title = "Percentage", @onkeyup = "ValidPaymentTermOnPercentage(" + i + ")" })
                                @Html.Hidden("hdn_CostTypeCode_" + i, item.Cost_Type_Code)
                                @Html.Hidden("hdn_BudgetedAmt_" + i)
                            </td>
                            <td>
                                @Html.TextBox("Due_Date", dt, new { @class = "isDatepicker shortDate", @placeholder = "DD/MM/YYYY", style = "width:100px;" })
                            </td>
                            <td align="center">
                                @{
                                    @*<input type="image" class="glyphicon glyphicon-ok-circle" title="Update" onclick="return checkForsave(1);" />*@
                                    <a title="@objMessageKey.Update" href="#" class="glyphicon glyphicon-ok-circle" onclick="return checkForsave(1);"></a>
                                    <a title="@objMessageKey.Cancel" href="#" class="glyphicon glyphicon-remove-circle" onclick="AddCancelPaymentTerms(0)"></a>}
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        @{string dt = "";
                            if (Convert.ToDateTime(item.Due_Date) == DateTime.MinValue)
                            {
                                dt = "";
                            }
                            else
                            {
                                dt = Convert.ToDateTime(item.Due_Date).ToString("dd/MM/yyyy");
                            }}
                        <td>
                            <label for="Payment_Terms1" style="width: 200px;" id="Payment_Terms1_Edit">@item.Payment_Terms</label>
                            <label for="Payment_Terms_Code" style="display: none;" id="Payment_Terms_Code_Edit">@item.Payment_Term_Code</label>
                        </td>
                        <td>
                            <label for="Days_After" id="Days_After_Edit">@item.Days_After</label>
                        </td>
                        <td>
                            
                            <div class="divBlock">
                                <div style="width:50%; float:left;">
                                    <label for="Cost_Type_Name" id="Cost_Type_Name_Edit">@item.Cost_Type_Name</label>
                                    <label for="Cost_Type_Code" style="display: none;" id="Cost_Type_Code_Edit">@item.Cost_Type_Code</label>
                                </div>
                                <div style="width:135px; float:right;">
                                    <label for="Amount" id="Amount_Edit">@item.Amount</label>
                                    <label for="Percentage" id="Percentage_Edit">@item.Percentage</label>
                                    <span id="percentageSign_Edit">%</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                </div>

                            </div>
                        </td>
                        <td>
                            @dt
                        </td>
                        <td align="center">
                            <a href="#" class="glyphicon glyphicon-pencil" title="@objMessageKey.Edit" onclick="EditPaymentTerm(@item.Acq_Deal_Payment_Terms_Code)"></a>
                            <a href="#" class="glyphicon glyphicon-trash" title="@objMessageKey.Delete" onclick="OnDeleteClick(@item.Acq_Deal_Payment_Terms_Code);"></a>
                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>
