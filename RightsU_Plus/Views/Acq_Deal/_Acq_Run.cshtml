@model RightsU_Entities.Acq_Deal_Run
@using UTOFrameWork.FrameworkClasses
@{
    RightsU_Entities.Deal_Schema objSchema = new RightsU_Entities.Deal_Schema();
    if (Session[RightsU_Entities.RightsU_Session.ACQ_DEAL_SCHEMA] != null)
    {
        objSchema = (RightsU_Entities.Deal_Schema)Session[RightsU_Entities.RightsU_Session.ACQ_DEAL_SCHEMA];
    }
    MessageKey objMessageKey = new MessageKey();
    if (Session["objMessageKey"] != null)
    {
        objMessageKey = (MessageKey)Session["objMessageKey"];
    }
    
}

<link type="text/css" rel="stylesheet" href="~/CSS/jquery.timeentry.css">
<script type="text/javascript" src="~/JS_Core/jquery.plugin.js"></script>
<script type="text/javascript" src="~/JS_Core/jquery.timeentry.js"></script>

<script>
    @*$(document).ready(function () {
        debugger;
        $("#ancFileName").attr('href','Help/index.html?IntCode=@Session["FileName"]');
    })*@;
    var recordLockingCode_G =  @ViewBag.Record_Locking_Code;
    var acqDealRunCode_G =  @Model.Acq_Deal_Run_Code;
    var runType_G = '@Model.Run_Type';
    var isYearWise_G = '@Model.Is_Yearwise_Definition';
    var yearWiseScheduleRunCount_G = parseInt('@Model.Acq_Deal_Run_Yearwise_Run.Sum(y => y.No_Of_Runs_Sched)');
    var isRuleRight_G = '@Model.Is_Rule_Right';
    var rightRuleCode_G = '@Model.Right_Rule_Code';
    var repeatWithinDaysHrs_G = '@Model.Repeat_Within_Days_Hrs';
    var isChannelDefinitionRights_G = '@Model.Is_Channel_Definition_Rights';
    var runDefinitionType_G = $.trim('@Model.Run_Definition_Type');
    var channelType = '@Model.Channel_Type';
    if(channelType == "C")
        var primaryChannelCode_G = '@Model.Primary_Channel_Code';
    else
        var primaryChannelClusterCode_G = '@Model.Primary_Channel_Code';
    var runDisableChannelwise_G = '@ViewBag.RUN_DISABLE_CHANNELWISE';

    var ChanelCategoryCode = '@Model.Channel_Category_Code';
    var strTitleHiddenHtml_G = '';
    if(acqDealRunCode_G > 0)
    {
        var titleIndex = 0;
        @for (int i = 0; i < Model.Acq_Deal_Run_Title.Count; i++)
            {
                            <text>
        var acqDealRunCode = '@(Model.Acq_Deal_Run_Code)'
        var acqDealRunTitleCode = '@(Model.Acq_Deal_Run_Title.ElementAt(i).Acq_Deal_Run_Title_Code)'
        var titleCode = '@(Model.Acq_Deal_Run_Title.ElementAt(i).Title_Code)'
        var episodeFrom = '@(Model.Acq_Deal_Run_Title.ElementAt(i).Episode_From)'
        var episodeTo = '@(Model.Acq_Deal_Run_Title.ElementAt(i).Episode_To)'
        strTitleHiddenHtml_G = strTitleHiddenHtml_G + '<input type="Hidden" id="_' + titleIndex + '_Acq_Deal_Run_Code"' + ' name="Acq_Deal_Run_Title[' + titleIndex + '].Acq_Deal_Run_Code" value="' + $.trim(acqDealRunCode) + '"></input>'
        strTitleHiddenHtml_G = strTitleHiddenHtml_G + '<input type="Hidden" id="_' + titleIndex + '_Acq_Deal_Run_Title_Code"' + ' name="Acq_Deal_Run_Title[' + titleIndex + '].Acq_Deal_Run_Title_Code" value="' + $.trim(acqDealRunTitleCode) + '"></input>'
        strTitleHiddenHtml_G = strTitleHiddenHtml_G + '<input type="Hidden" id="_' + titleIndex + '_Title_Code"' + ' name="Acq_Deal_Run_Title[' + titleIndex + '].Title_Code" value="' + $.trim(titleCode) + '"></input>'
        strTitleHiddenHtml_G = strTitleHiddenHtml_G + '<input type="Hidden" id="_' + titleIndex + '_Episode_From"' + ' name="Acq_Deal_Run_Title[' + titleIndex + '].Episode_From" value="' + $.trim(episodeFrom) + '"></input>'
        strTitleHiddenHtml_G = strTitleHiddenHtml_G + '<input type="Hidden" id="_' + titleIndex + '_Episode_To"' + ' name="Acq_Deal_Run_Title[' + titleIndex + '].Episode_To" value="' + $.trim(episodeTo) + '"></input>'
        titleIndex = titleIndex + 1;
        </text>
            }
    }

    var primeRun_G = '@Model.Prime_Run';
    var offPrimeRun_G = '@Model.Off_Prime_Run';

    if (primeRun_G == '')
        primeRun_G = 0;
    else
        primeRun_G = parseInt(primeRun_G);

    if (offPrimeRun_G == '')
        offPrimeRun_G = 0;
    else
        offPrimeRun_G = parseInt(offPrimeRun_G);

    var URL_Global_Refresh_Lock = '@Url.Action("Refresh_Lock", "Global", null, Request.Url.Scheme)';
    var URL_PartialYearWiseList = '@Url.Action("PartialYearWiseList", "Acq_Run")';
    var URL_PartialChannelList = '@Url.Action("PartialChannelList", "Acq_Run")'
    var URL_PartialChannelList1 = '@Url.Action("PartialChannelList1", "Acq_Run")'
    var URL_CheckIfShowLinked = '@Url.Action("CheckIfShowLinked", "Acq_Run")';
    var URL_GetYearWiseRun = '@Url.Action("GetYearWiseRun", "Acq_Run")';
    var URL_GetRightRule = '@Url.Action("GetRightRule", "Acq_Run")';
    var URL_ValidateTitleOnSave = '@Url.Action("ValidateTitleOnSave", "Acq_Run")';
    var URL_ValidateDuplication = '@Url.Action("ValidateDuplication", "Acq_Run")';
    var URL_ValidateTime = '@Url.Action("ValidateTime", "Acq_Run")';
    var URL_Acq_Run_List_Index = '@Url.Action("Index", "Acq_Run_List")';
    var URL_Global_ChangeTab = '@Url.Action("ChangeTab", "Global")';
    var URL_BindAllPreReq_Async = '@Url.Action("BindAllPreReq_Async", "Acq_Run")';
    var URL_CheckSubLicen= '@Url.Action("CheckSubLicen", "Acq_Run")';
    var URL_ChannelCategory_Changed= '@Url.Action("ChannelCategory_Changed", "Acq_Run")';
    var URL_ChannelChanged= '@Url.Action("ChannelChanged", "Acq_Run")';
    var URL_ChanelCateogyChanged= '@Url.Action("ChannelCategoryChanged", "Acq_Run")';
    var ShowMessage = {
        "MsgForLinked": '@objMessageKey.CannotremovechannelIthasshowsthatarealreadylinked',
        "lblForAssignor": '@objMessageKey.Assignor',
        "lblForLicensor": '@objMessageKey.Licensor',
        "lblForProducerLineProducer" : '@objMessageKey.ProducerLineProducer',
        "lblForInvalidYearwiseRun" : '@objMessageKey.Invalidavailableperiodforyearwiserun',
        "lblForTitle" : '@objMessageKey.Title',
        "lblForRightStartDate" : '@objMessageKey.RightStartDate',
        "lblForRightEndDate" : '@objMessageKey.RightEndDate',
        "lblForConflictCombination" : '@objMessageKey.Combinationconflictswithotherrundefinition',
        "lblForChannel" : '@objMessageKey.Channel',
        "invalidTitleRun" : '@objMessageKey.Selectedtitlesareinvalidforyearwiserundefinition',
        "lblForNoOfExhibition" : '@objMessageKey.Pleaseenternoofexhibition',
        "lblForSelectTitle" : '@objMessageKey.Pleaseselecttitle',
        "lblForSelectChannel" : '@objMessageKey.Pleaseselectchannel',
        "lblForSelectRunDef" : '@objMessageKey.Pleaseselectrundefinition',
        "lblForSumOfYearwise" : '@objMessageKey.Sumofyearwiserunshouldbeequaltonumberofexhibition',
        "lblForSynRun" : '@objMessageKey.SyndicationRunshouldbelessthenTotalNumberOfRun',
        "lblForEqualChannel" : '@objMessageKey.Pleaseenternoofrunsequaltonoofchannels',
        "lblForUnsavedData" : '@objMessageKey.AllUnsavedDataWillBeLostStillWantToGoAhead',
        "lblForRunUpdate" : '@objMessageKey.RunDefinitionUpdatedSuccessfully',
        "lblForRunAdded" : '@objMessageKey.RunDefinitionAddedSuccessfully',
        "lblForInvalidRun" : '@objMessageKey.InvalidRunCombinationforScheduledRun',
        "MsgPlaceSearch": '@objMessageKey.Search'
    }
    function SelectDaysCheckbox()
    {
        @for (int i = 0; i < Model.Acq_Deal_Run_Repeat_On_Day.Count; i++)
            {
                             <text>
        var days = '@(Model.Acq_Deal_Run_Repeat_On_Day.ElementAt(i).Day_Code)'
        $('input[name=chkDays][value=' + days + ']').prop('checked', true)
        </text>
            }
    }
    function ChannelOrCategory_Changed(type)
    {
        debugger
        if(type == "C"){
            $('#divChannelCategory').hide();
            $('#addChannel_edit').show();
            ChannelChanged();
            var strHTML = '<option value="0">Please Select</option>';
            $('#ddlPrimaryChannel').html(strHTML);
            $('#ddlPrimaryChannel option[value= 0]').attr("selected", "selected");
            $('#ddlPrimaryChannel').trigger('chosen:updated');
            $('#showRundefinition2_1').empty();
            $('#showRundefinition2_2').empty();
            $('#showRundefinition2_3').empty();
            $('#showRundefinition2_4').empty();

            document.getElementById("showRundefinition2_1").style.display = 'none';
            document.getElementById("showRundefinition2_2").style.display = 'none';
            document.getElementById("showRundefinition2_3").style.display = 'none';
            document.getElementById("showRundefinition2_4").style.display = 'none';
            document.getElementById("showRundefinition2_5").style.display = 'none';
            //$('input[name=Run_Definition_Type]').prop('checked', false)
            $('input[name=Run_Definition_Type][value=N]').prop('checked', true)
        }
        else{
            $('#divChannelCategory').show();
            $('#addChannel_edit').hide();
            var strHTML = '<option value="0">Please Select</option>';
            $('#ddlPrimaryChannelCluster').html(strHTML);
            $('#ddlPrimaryChannelCluster option[value= 0]').attr("selected", "selected");
            $('#ddlPrimaryChannelCluster').trigger('chosen:updated');
            ChannelChanged();
            $('#showRundefinition2_1').empty();
            $('#showRundefinition2_2').empty();
            $('#showRundefinition2_3').empty();
            $('#showRundefinition2_4').empty();

            document.getElementById("showRundefinition2_1").style.display = 'none';
            document.getElementById("showRundefinition2_2").style.display = 'none';
            document.getElementById("showRundefinition2_3").style.display = 'none';
            document.getElementById("showRundefinition2_4").style.display = 'none';
            document.getElementById("showRundefinition2_5").style.display = 'none';
           // $('input[name=Run_Definition_Type]').prop('checked', false)
             $('input[name=Run_Definition_Type][value=N]').prop('checked', true)
            //var strHTML = '<option value="0">Please Select</option>';
            //$('#ddlPrimaryChannel').html(strHTML);
            //$('#ddlPrimaryChannel option[value= 0]').attr("selected", "selected");
            //$('#ddlPrimaryChannel').trigger('chosen:updated');
        }
    }
    function ChannelChanged()
    {
        debugger
        $.ajax({
            type: "POST",
            traditional: true,
            enctype: 'multipart/form-data',
            contentType: "application/json; charset=utf-8",
            url: URL_ChannelChanged,
            data: JSON.stringify({
            }),
            async: true,
            success: function (result) {
                debugger
                if (result == "true") {
                    redirectToLogin();
                }
                else {
                    $('#lbChannel').empty();
                    $("#lbChannelCluster").empty();

                    $.each(result.Channel_List, function () {
                        $("#lbChannel").append($("<option />").val(this.Value).text(this.Text));
                    });
                    $('#lbChannel').each(function () {
                        $(this)[0].sumo.reload();
                    });
                    $.each(result.Channel_Cluster_List, function () {
                        $("#lbChannelCluster").append($("<option />").val(this.Value).text(this.Text));
                    });
                    $("#lbChannelCluster").trigger("chosen:updated");
                    //if (result.Selected_Channel_Cluster_Codes != '')
                    //    $("#lbChannel").val(result.Selected_Channel_Cluster_Codes.split(','))

                    //if (result.Selected_Channel_Codes != '')
                    //    $("#lbChannel").val(result.Selected_Channel_Codes.split(','))
                }
            },
            error: function (result) {
                alert('Error: ' + result.responseText);
            }
        });
    }

    function ChannelCategory_Changed()
    {
        debugger

        debugger
        var Category_Code = $('#lbChannelCluster').val();
        $.ajax({
            type: "POST",
            url: URL_ChanelCateogyChanged,
            traditional: true,
            async: false,
            enctype: 'multipart/form-data',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                category_Code: Category_Code
            }),
            success: function (result) {
                $("#ddlPrimaryChannelCluster").empty();
                $.each(result.Channel_Cluster_Primary_List, function () {
                    $("#ddlPrimaryChannelCluster").append($("<option />").val(this.Value).text(this.Text));
                });
                $("#ddlPrimaryChannelCluster").trigger("chosen:updated");
            },
            error: function (result) {
                alert('Error: ' + result.responseText);
            }
        });
        $('#showRundefinition2_1').empty();
        $('#showRundefinition2_2').empty();
        $('#showRundefinition2_3').empty();
        $('#showRundefinition2_4').empty();

        document.getElementById("showRundefinition2_1").style.display = 'none';
        document.getElementById("showRundefinition2_2").style.display = 'none';
        document.getElementById("showRundefinition2_3").style.display = 'none';
        document.getElementById("showRundefinition2_4").style.display = 'none';
        document.getElementById("showRundefinition2_5").style.display = 'none';
       // $('input[name=Run_Definition_Type]').prop('checked', false)
        $('input[name=Run_Definition_Type][value=N]').prop('checked', true)
    }
    //var channelCategoryCode = $('#lbChannelCluster').val();
    //    if(channelCategoryCode == "" || channelCategoryCode == null)
    //        channelCategoryCode = 0;
    //     $.ajax({
    //            type: "POST",
    //            traditional: true,
    //            enctype: 'multipart/form-data',
    //            contentType: "application/json; charset=utf-8",
    //            url: URL_ChannelCategory_Changed,
    //            data: JSON.stringify({
    //                ChannelCategoryCode: channelCategoryCode
    //            }),
    //            async: true,
    //            success: function (result) {
    //                debugger
    //                if (result == "true") {
    //                    redirectToLogin();
    //                }
    //                else {
    //                    $('#lbChannel').empty();
    //                    $.each(result.Channel_List, function () {
    //                        $("#lbChannel").append($("<option />").val(this.Value).text(this.Text));
    //                    });
    //                    $('#lbChannel').each(function () {
    //                        $(this)[0].sumo.reload();
    //                    });

    //                    //if (result.Selected_Channel_Codes != '')
    //                    //    $("#lbChannel").val(result.Selected_Channel_Codes.split(','))
    //                }
    //            },
    //            error: function (result) {
    //                alert('Error: ' + result.responseText);
    //            }
    //        });

</script>
<script src="~/Custom_Scripts/Acq_Deal_Run.js?v=@System.Configuration.ConfigurationManager.AppSettings["Version_No"]"></script>
<style>
    #tabRunDef .chosen-container {
        margin: 0;
    }

    input.is-timeEntry {
        width: 80px;
    }

    input.numbertext {
        width: 55px;
    }

    span + .numbertext {
        margin-right: 20px;
    }

    #addChannel_edit .chosen-results {
        max-height: 125px;
    }

    .SumoSelect, #divddlPTitle, #divlbChannel {
        width: 96%;
    }

        #divddlPTitle > div {
            width: 100% !important;
        }

        #divlbChannel > div {
            width: 100% !important;
        }

    .navigation_tabs {
        overflow: visible !important;
    }

    .SumoSelect > .optWrapper {
        z-index: 6;
    }
</style>

@using (Ajax.BeginForm("Save", "Acq_Run", new AjaxOptions { OnSuccess = "OnSuccess" }))
{
    <div class="grid_area">

        <div class="navigation_tabs">
            <div class="tabbable">
                <div class="tab-content clearfix table-wrapper scale_table_container">
                    <div class="tab-pane active" id="tabRunDef">
                        <div class="scale_table_block">
                            <table class="table">
                                <tr>
                                    <td class='bold' width="20%">@objMessageKey.Title </td>
                                    <td id="tdTitleCodes" colspan="3">
                                        <div id="divddlPTitle">
                                            <select id="ddlPTitle" name="ddlPTitle" multiple="multiple" onchange="return CheckSubLicen()"></select>
                                        </div>
                                        @Html.Hidden("hdnTitleList")
                                        @Html.HiddenFor(m => m.Acq_Deal_Run_Code)
                                        <input type="hidden" id="hdnTabName" name="hdnTabName" />
                                    </td>
                                </tr>
                                <tr>
                                    <td class='bold'>@objMessageKey.NoofExhibition</td>
                                    <td colspan="3">
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(m => Model.Run_Type, "U", new { @onclick = "showLimited2(this)", @checked = "checked" })
                                            @objMessageKey.Unlimited
                                        </label>
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(m => Model.Run_Type, "C", new { @onclick = "showLimited2(this)" })
                                            @objMessageKey.Limited
                                        </label>

                                        <table style="width:300px !important;" id="tblLimited">
                                            <tr>
                                                <td id="tdaddNoRun">
                                                    <label id="lbladdNoRun" class='bold' style="display: none;">
                                                        @objMessageKey.Runs
                                                    </label><br />
                                                    <input type="text" id="addNoRun" name="addNoRun" value="@ViewBag.No_Of_Run" style="display: none;" class="numbertext" onkeyup="return CalculateActualRun();" />
                                                </td>
                                                <td id="tdaddSynRun">
                                                    <label id="lbladdSynRun" style="display: none;" class='bold'>
                                                        @objMessageKey.SyndicationRuns
                                                    </label><br />
                                                    @Html.TextBoxFor(m => Model.Syndication_Runs, new { @name = "addSynRun", @id = "addSynRun", @class = "numbertext", @style = "display: none;", @onkeyup = "return CalculateActualRun();" })
                                                </td>
                                                <td>
                                                    <label id="lblAddLimited" style="display: none;" class='bold'>
                                                        @objMessageKey.RunsSelf
                                                    </label><br />
                                                    @Html.TextBoxFor(m => Model.No_Of_Runs, new { @name = "addLimited2", @id = "addLimited2", @class = "numbertext", @style = "display: none;" })
                                                    <label id="lblAddLimited" style="display: none;">(@objMessageKey.EntireLicensePeriod)</label>
                                                </td>
                                            </tr>
                                        </table>

                                    </td>
                                </tr>
                                <tr>
                                    <td class='bold'>@objMessageKey.YearWiseRunDefinition</td>
                                    <td colspan="3">
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(m => Model.Is_Yearwise_Definition, "Y", new { @onclick = "showrunsDefinition2(this)" })
                                            @objMessageKey.Yes
                                        </label>
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(m => Model.Is_Yearwise_Definition, "N", new { @onclick = "showrunsDefinition2(this)", @checked = "checked" })
                                            @objMessageKey.NO
                                        </label>
                                        @Html.Hidden("hdnIs_Yearwise_Definition", (string.IsNullOrEmpty(Model.Is_Yearwise_Definition)) ? "N" : Model.Is_Yearwise_Definition)
                                    </td>
                                </tr>
                                <tr id="addrunsDef2" style="display: none;"></tr>
                                <tr>
                                    <td class='bold'>@objMessageKey.PerExhibitionDayRuleRight</td>
                                    <td colspan="3">
                                        <span class="required">
                                            <label class="radio-inline">
                                                @Html.RadioButtonFor(m => Model.Is_Rule_Right, "Y", new { @onclick = "showRules2(this)" })
                                                @objMessageKey.Yes
                                            </label>
                                            <label class="radio-inline">
                                                @Html.RadioButtonFor(m => Model.Is_Rule_Right, "N", new { @onclick = "showRules2(this)", @checked = "checked" })
                                                @objMessageKey.NO
                                            </label>
                                        </span>
                                    </td>
                                </tr>
                                <tr id="RuleEdit_1" style="display: none;">
                                    <td class='search'>@objMessageKey.Rule</td>
                                    <td colspan="3">
                                        <select id="ddlRuleRight" name="ddlRuleRight" class="form_input chosen-select" onchange="bindRuleRecord(this)"></select>
                                        @Html.HiddenFor(m => Model.Right_Rule_Code, new { @name = "Right_Rule_Code", @id = "Right_Rule_Code" })
                                    </td>
                                </tr>
                                <tr id="RuleEdit_2" style="display: none;">
                                    <td class='search'>@objMessageKey.DayStartTime  </td>
                                    <td colspan="3">
                                        @Html.TextBox("txtDayStartTime", string.Empty, new { @readonly = "readonly" })
                                    </td>
                                </tr>
                                <tr id="RuleEdit_3" style="display: none;">
                                    <td class='search'>@objMessageKey.Playsperday  </td>
                                    <td colspan="3">@Html.TextBox("txtPlaysperday", string.Empty, new { @readonly = "readonly" })</td>
                                </tr>
                                <tr id="RuleEdit_4" style="display: none;">
                                    <td class='search'>@objMessageKey.DurationofDay (@objMessageKey.inhrs)</td>
                                    <td colspan="3">@Html.TextBox("txtDurationofDay", string.Empty, new { @readonly = "readonly" })</td>
                                </tr>
                                <tr id="RuleEdit_5" style="display: none;">
                                    <td class='search'>@objMessageKey.NoofRepeat </td>
                                    <td colspan="3">@Html.TextBox("txtNoofRepeat", string.Empty, new { @readonly = "readonly" })</td>
                                </tr>
                                <tr id="RuleEdit_6" style="display: none;">
                                    <td class='search'>@objMessageKey.RepeatWithinDuration</td>
                                    <td colspan="3">
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(model => Model.Repeat_Within_Days_Hrs, "D", new { id = "Days", @checked = "checked", @onclick = "showdays2(this)" })
                                            @objMessageKey.Days
                                        </label>
                                        <label class="radio-inline">
                                            @Html.RadioButtonFor(model => Model.Repeat_Within_Days_Hrs, "H", new { id = "Hours", @onclick = "showdays2(this)" })
                                            @objMessageKey.Hours
                                        </label>

                                        @Html.TextBoxFor(m => Model.No_Of_Days_Hrs, new { @name = "txtHrs2", @id = "txtHrs2", @class = "text numbertext" })
                                        @Html.Label("Days", new { @id = "lblDaysHours" })
                                    </td>
                                </tr>
                                <tr id="RuleEdit_7" style="display: none;">
                                    <td class='search'>@objMessageKey.OnlyOn</td>
                                    <td colspan="3">
                                        @foreach (UTOFrameWork.FrameworkClasses.AttribValue attr in ViewBag.DaysList)
                                        {
                                            <label class="checkbox-inline">
                                                <input type='checkbox' name='chkDays' value='@attr.Val' id="@attr.Attrib" />
                                                @attr.Attrib
                                            </label>
                                            @Html.Hidden("hdnDays");
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td class='bold'>@objMessageKey.ChannelDefinition </td>
                                    <td colspan="3">
                                        <span class="required">
                                            <label class="radio-inline">
                                                @Html.RadioButtonFor(m => Model.Is_Channel_Definition_Rights, "Y", new { @onclick = "showChannel2(this)" })
                                                @objMessageKey.Yes
                                            </label>
                                            <label class="radio-inline">
                                                @Html.RadioButtonFor(m => Model.Is_Channel_Definition_Rights, "N", new { @onclick = "showChannel2(this)", @checked = "checked" })
                                                @objMessageKey.NO
                                            </label>
                                            @Html.Hidden("hdnIs_Channel_Definition_Rights", (string.IsNullOrEmpty(Model.Is_Channel_Definition_Rights)) ? "N" : Model.Is_Channel_Definition_Rights)
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="bold">@objMessageKey.ChannelType</td>
                                    <td>
                                        <label class="radio-inline">
                                            @*<b>@Html.RadioButtonFor(m => Model.Channel_Type, "C", new { @id = "radShared", @onClick = "ChannelType_OnChange(false);", @checked = "checked" })@objMessageKey.Shared</b>*@

                                            <b>@Html.RadioButtonFor(m => Model.Channel_Type, "C", new { @id = "rbChannel", @onClick = "ChannelOrCategory_Changed('C');", @checked = "checked" })</b>@objMessageKey.Channel
                                        </label>
                                        <label class="radio-inline">
                                            <b>@Html.RadioButtonFor(m => Model.Channel_Type, "G", new { @id = "rbChannelCategory", @onClick = "ChannelOrCategory_Changed('G');" })</b>@objMessageKey.ChannelCluster
                                        </label>
                                    </td>
                                </tr>
                                <tr id="divChannelCategory" style="display:none;">
                                    <td class='bold'>@objMessageKey.ChannelCluster</td>
                                    <td style="width: 450px">
                                        <div id="divChannelCategorys">
                                            <select id="lbChannelCluster" name="lbChannelCluster" class="form_input chosen-select" onchange="ChannelCategory_Changed();"></select>
                                            @*@Html.DropDownList("ddlChannelCluster", ViewBag.ChannelCluster as SelectList, "Please Select", new { @id = "ddlChannelCluster", @class = "form_input chosen-select", @onchange = "ChannelCategory_Changed();" })*@
                                        </div>
                                    </td>
                                    <td class='bold' style="width: 140px">@objMessageKey.PrimaryChannel</td>
                                    <td>
                                        <select id="ddlPrimaryChannelCluster" name='ddlPrimaryChannelCluster' class='form_input chosen-select'>
                                            <option value="0">@objMessageKey.PleaseSelect</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr id="addChannel_edit" style="display: none;">
                                    <td class='bold'>@objMessageKey.Channel</td>
                                    <td style="width: 450px">
                                        <div id="divlbChannel">
                                            <select id="lbChannel" name="lbChannel" class="" multiple="multiple"></select>
                                        </div>
                                        @Html.Hidden("hdnSelectedChannel")
                                    </td>
                                    <td class='bold' style="width: 140px">@objMessageKey.PrimaryChannel</td>
                                    <td>
                                        <select id="ddlPrimaryChannel" name='ddlPrimaryChannel' class='form_input chosen-select'>
                                            <option value="0">@objMessageKey.PleaseSelect</option>
                                        </select>
                                    </td>
                                </tr>
                                <tr id="addChannel2_edit" style="display: none;">
                                    <td class='bold'>@objMessageKey.RunDefinition</td>
                                    <td colspan="3" class='head2'>
                                        <table width="100%" border='0' cellpadding='0' cellspacing='0' align='center' valign='top'>
                                            <tr>
                                                <td>
                                                    <span class="required">
                                                        <div id="divRunChannelDef" style="width:25%">
                                                            @foreach (UTOFrameWork.FrameworkClasses.AttribValue attr in ViewBag.ChannelDefnList)
                                                            {
                                                                <label class="radio-inline">
                                                                    @Html.RadioButtonFor(m => Model.Run_Definition_Type, attr.Val, new { @onclick = "showRunDifination2(this)", style = "cursor: hand;" })
                                                                    @attr.Attrib
                                                                </label>
                                                            }
                                                        </div>
                                                    </span>
                                                </td>
                                            </tr>
                                            <tr id="showRundefinition2_1" style="display: none;"></tr>
                                            <tr id="showRundefinition2_2" style="display: none;"></tr>
                                            <tr id="showRundefinition2_3" style="display: none;"></tr>
                                            <tr id="showRundefinition2_4" style="display: none;"></tr>
                                            <tr id="showRundefinition2_5">
                                                <td class='normal'>&nbsp;</td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                                <tr>
                                    <td class='bold'>@objMessageKey.Prime/@objMessageKey.OffPrime @objMessageKey.Definition</td>
                                    <td colspan="3">
                                        <label class="radio-inline">
                                            @Html.RadioButton("Is_Prime_OffPrime_Defn", "Y", new { @onclick = "showPrime(this)" })
                                            @objMessageKey.Yes
                                        </label>
                                        <label class="radio-inline">
                                            @Html.RadioButton("Is_Prime_OffPrime_Defn", "N", new { @onclick = "showPrime(this)", @checked = "checked" })
                                            @objMessageKey.NO
                                        </label>
                                    </td>
                                </tr>
                                <tr id="rowPrime1" style="display: none;">
                                    <td class="bold">@objMessageKey.PrimeTime</td>
                                    <td colspan="3">
                                        <div class="divBlock">
                                            <div>
                                                <span class="text-lowercase">@objMessageKey.StartTime:</span>
                                                @Html.TextBoxFor(m => Model.Prime_Start_Time, new { @name = "txtStartPrimeTime", @id = "txtStartPrimeTime", @class = "PrimetimeRange" })
                                            </div>
                                            <div>
                                                <span class="text-lowercase">@objMessageKey.EndTime:</span>
                                                @Html.TextBoxFor(m => Model.Prime_End_Time, new { @name = "txtEndPrimeTime", @id = "txtEndPrimeTime", @class = "PrimetimeRange" })
                                            </div>
                                            <div>
                                                <span class="text-lowercase">@objMessageKey.Run:</span>
                                                @Html.TextBoxFor(m => Model.Prime_Run, new { @name = "txtPrimeRun", @id = "txtPrimeRun", @class = "numbertext" })
                                            </div>
                                            <div>@ViewBag.PrimeScheduledRuns</div>
                                            <div>@ViewBag.PrimeBalanceRuns</div>
                                        </div>
                                    </td>
                                </tr>
                                <tr id="rowPrime2" style="display: none;">
                                    <td class="bold">@objMessageKey.OffPrimeTime</td>
                                    <td colspan="3">
                                        <div class="divBlock">
                                            <div>
                                                <span class="text-lowercase">@objMessageKey.StartTime:</span>
                                                @Html.TextBoxFor(m => Model.Off_Prime_Start_Time, new { @name = "txtStartNPrimeTime", @id = "txtStartNPrimeTime", @class = "NonPrimetimeRange" })
                                                @*<input class="smallTextBox NonPrimetimeRange" id="txtStartNPrimeTime" name="txtStartNPrimeTime" type="text" value="" />*@
                                            </div>
                                            <div>
                                                <span class="text-lowercase">@objMessageKey.EndTime:</span>
                                                @Html.TextBoxFor(m => Model.Off_Prime_End_Time, new { @name = "txtEndNPrimeTime", @id = "txtEndNPrimeTime", @class = "NonPrimetimeRange" })
                                            </div>
                                            <div>
                                                <span class="text-lowercase">@objMessageKey.Run:</span>
                                                @Html.TextBoxFor(m => Model.Off_Prime_Run, new { @name = "txtNPrimeRun", @id = "txtNPrimeRun", @class = "numbertext" })
                                            </div>
                                            <div>@ViewBag.OffPrimeScheduledRuns</div>
                                            <div>@ViewBag.OffPrimeBalanceRuns</div>
                                        </div>
                                    </td>
                                </tr>
                                <tr id="rowPrime3">
                                    <td class="bold">@objMessageKey.TimeLag</td>
                                    <td colspan="3">
                                        @Html.TextBoxFor(m => Model.Time_Lag_Simulcast, new { @name = "txtTimeLag", @id = "txtTimeLag" })
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="bottom_action">
                        <ul class="form_link_nav clearfix">
                            <li>
                                <input type="submit" id="btnSaveRun" class="btn-primary" value="@objMessageKey.Save" onclick="ClearHidden(); return ValidateSave();" />
                            </li>

                            <li>
                                <input type="button" class="btn-primary" value="@objMessageKey.Cancel" onclick="validateOnCancel();" />
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<div aria-labelledby="myModalLabel" class="form_wrapper modal fade" id="popRunDefn" role="dialog" tabindex="-1" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content clearfix">
            <form class="form" id="Form1">
                <div>
                    <div class="form_fields acq">
                        <div class="modal_block modal_header">
                            <a class="close" data-dismiss="modal" href="#">
                                <span>
                                    ×
                                </span>
                                <span class="sr-only">Close</span>
                            </a>
                            <h2 id="lblConflictHeading">@objMessageKey.Combinationconflictswithotherrundefinition</h2>
                        </div>

                        <div id="conflictRun" class="modal_block">
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
<style>
    #conflictRun {
        width: 587px !important;
    }

    .slimScrollDiv {
        border: 1px solid #eee;
    }

    #nav {
        position: fixed;
        top: 0;
        left: 0;
        background: #fff;
        padding: 15px;
        border-radius: 20px;
        width: 200px;
    }

        #nav ul {
            list-style-type: square;
            list-style-position: inside;
            margin: 20px 0 0 0;
            padding: 0;
        }

        #nav a {
            text-decoration: none;
            color: #000;
        }

            #nav a:hover {
                text-decoration: underline;
            }

    #git-fork img {
        position: fixed;
        top: 0;
        right: 0;
        border: 0;
        z-index: 999;
    }
</style>
<script>

    (function ($) {

        $.fn.extend({
            slimScroll: function (options) {
                if (LayoutDirection_G == "RTL") {
                    var defaults = {

                        // width in pixels of the visible scroll area
                        width: 'auto',

                        // height in pixels of the visible scroll area
                        height: '250px',

                        // width in pixels of the scrollbar and rail
                        size: '7px',

                        // scrollbar color, accepts any hex/color value
                        color: '#000',

                        // scrollbar position - left/right
                        position: 'left',

                        // distance in pixels between the side edge and the scrollbar
                        distance: '1px',

                        // default scroll position on load - top / bottom / $('selector')
                        start: 'top',

                        // sets scrollbar opacity
                        opacity: .4,

                        // enables always-on mode for the scrollbar
                        alwaysVisible: false,

                        // check if we should hide the scrollbar when user is hovering over
                        disableFadeOut: false,

                        // sets visibility of the rail
                        railVisible: false,

                        // sets rail color
                        railColor: '#333',

                        // sets rail opacity
                        railOpacity: .2,

                        // whether  we should use jQuery UI Draggable to enable bar dragging
                        railDraggable: true,

                        // defautlt CSS class of the slimscroll rail
                        railClass: 'slimScrollRail',

                        // defautlt CSS class of the slimscroll bar
                        barClass: 'slimScrollBar',

                        // defautlt CSS class of the slimscroll wrapper
                        wrapperClass: 'slimScrollDiv',

                        // check if mousewheel should scroll the window if we reach top/bottom
                        allowPageScroll: false,

                        // scroll amount applied to each mouse wheel step
                        wheelStep: 20,

                        // scroll amount applied when user is using gestures
                        touchScrollStep: 200,

                        // sets border radius
                        borderRadius: '7px',

                        // sets border radius of the rail
                        railBorderRadius: '7px'
                    };
                }
                else
                {
                    var defaults = {

                        // width in pixels of the visible scroll area
                        width: 'auto',

                        // height in pixels of the visible scroll area
                        height: '250px',

                        // width in pixels of the scrollbar and rail
                        size: '7px',

                        // scrollbar color, accepts any hex/color value
                        color: '#000',

                        // scrollbar position - left/right
                        position: 'right',

                        // distance in pixels between the side edge and the scrollbar
                        distance: '1px',

                        // default scroll position on load - top / bottom / $('selector')
                        start: 'top',

                        // sets scrollbar opacity
                        opacity: .4,

                        // enables always-on mode for the scrollbar
                        alwaysVisible: false,

                        // check if we should hide the scrollbar when user is hovering over
                        disableFadeOut: false,

                        // sets visibility of the rail
                        railVisible: false,

                        // sets rail color
                        railColor: '#333',

                        // sets rail opacity
                        railOpacity: .2,

                        // whether  we should use jQuery UI Draggable to enable bar dragging
                        railDraggable: true,

                        // defautlt CSS class of the slimscroll rail
                        railClass: 'slimScrollRail',

                        // defautlt CSS class of the slimscroll bar
                        barClass: 'slimScrollBar',

                        // defautlt CSS class of the slimscroll wrapper
                        wrapperClass: 'slimScrollDiv',

                        // check if mousewheel should scroll the window if we reach top/bottom
                        allowPageScroll: false,

                        // scroll amount applied to each mouse wheel step
                        wheelStep: 20,

                        // scroll amount applied when user is using gestures
                        touchScrollStep: 200,

                        // sets border radius
                        borderRadius: '7px',

                        // sets border radius of the rail
                        railBorderRadius: '7px'
                    };
                }

                var o = $.extend(defaults, options);

                // do it for every element that matches selector
                this.each(function () {

                    var isOverPanel, isOverBar, isDragg, queueHide, touchDif,
                      barHeight, percentScroll, lastScroll,
                      divS = '<div></div>',
                      minBarHeight = 30,
                      releaseScroll = false;

                    // used in event handlers and for better minification
                    var me = $(this);

                    // ensure we are not binding it again
                    if (me.parent().hasClass(o.wrapperClass)) {
                        // start from last bar position
                        var offset = me.scrollTop();

                        // find bar and rail
                        bar = me.siblings('.' + o.barClass);
                        rail = me.siblings('.' + o.railClass);

                        getBarHeight();

                        // check if we should scroll existing instance
                        if ($.isPlainObject(options)) {
                            // Pass height: auto to an existing slimscroll object to force a resize after contents have changed
                            if ('height' in options && options.height == 'auto') {
                                me.parent().css('height', 'auto');
                                me.css('height', 'auto');
                                var height = me.parent().parent().height();
                                me.parent().css('height', height);
                                me.css('height', height);
                            } else if ('height' in options) {
                                var h = options.height;
                                me.parent().css('height', h);
                                me.css('height', h);
                            }

                            if ('scrollTo' in options) {
                                // jump to a static point
                                offset = parseInt(o.scrollTo);
                            }
                            else if ('scrollBy' in options) {
                                // jump by value pixels
                                offset += parseInt(o.scrollBy);
                            }
                            else if ('destroy' in options) {
                                // remove slimscroll elements
                                bar.remove();
                                rail.remove();
                                me.unwrap();
                                return;
                            }

                            // scroll content by the given offset
                            scrollContent(offset, false, true);
                        }

                        return;
                    }
                    else if ($.isPlainObject(options)) {
                        if ('destroy' in options) {
                            return;
                        }
                    }

                    // optionally set height to the parent's height
                    o.height = (o.height == 'auto') ? me.parent().height() : o.height;

                    // wrap content
                    var wrapper = $(divS)
                      .addClass(o.wrapperClass)
                      .css({
                          position: 'relative',
                          overflow: 'hidden',
                          width: o.width,
                          height: o.height
                      });

                    // update style for the div
                    me.css({
                        overflow: 'hidden',
                        width: o.width,
                        height: o.height
                    });

                    // create scrollbar rail
                    var rail = $(divS)
                      .addClass(o.railClass)
                      .css({
                          width: o.size,
                          height: '100%',
                          position: 'absolute',
                          top: 0,
                          display: (o.alwaysVisible && o.railVisible) ? 'block' : 'none',
                          'border-radius': o.railBorderRadius,
                          background: o.railColor,
                          opacity: o.railOpacity,
                          zIndex: 90
                      });

                    // create scrollbar
                    var bar = $(divS)
                      .addClass(o.barClass)
                      .css({
                          background: o.color,
                          width: o.size,
                          position: 'absolute',
                          top: 0,
                          opacity: o.opacity,
                          display: o.alwaysVisible ? 'block' : 'none',
                          'border-radius': o.borderRadius,
                          BorderRadius: o.borderRadius,
                          MozBorderRadius: o.borderRadius,
                          WebkitBorderRadius: o.borderRadius,
                          zIndex: 99
                      });

                    // set position
                    var posCss = (o.position == 'right') ? { right: o.distance } : { left: o.distance };
                    rail.css(posCss);
                    bar.css(posCss);

                    // wrap it
                    me.wrap(wrapper);

                    // append to parent div
                    me.parent().append(bar);
                    me.parent().append(rail);

                    // make it draggable and no longer dependent on the jqueryUI
                    if (o.railDraggable) {
                        bar.bind("mousedown", function (e) {
                            var $doc = $(document);
                            isDragg = true;
                            t = parseFloat(bar.css('top'));
                            pageY = e.pageY;

                            $doc.bind("mousemove.slimscroll", function (e) {
                                currTop = t + e.pageY - pageY;
                                bar.css('top', currTop);
                                scrollContent(0, bar.position().top, false);// scroll content
                            });

                            $doc.bind("mouseup.slimscroll", function (e) {
                                isDragg = false; hideBar();
                                $doc.unbind('.slimscroll');
                            });
                            return false;
                        }).bind("selectstart.slimscroll", function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            return false;
                        });
                    }

                    // on rail over
                    rail.hover(function () {
                        showBar();
                    }, function () {
                        hideBar();
                    });

                    // on bar over
                    bar.hover(function () {
                        isOverBar = true;
                    }, function () {
                        isOverBar = false;
                    });

                    // show on parent mouseover
                    me.hover(function () {
                        isOverPanel = true;
                        showBar();
                        hideBar();
                    }, function () {
                        isOverPanel = false;
                        hideBar();
                    });

                    // support for mobile
                    me.bind('touchstart', function (e, b) {
                        if (e.originalEvent.touches.length) {
                            // record where touch started
                            touchDif = e.originalEvent.touches[0].pageY;
                        }
                    });

                    me.bind('touchmove', function (e) {
                        // prevent scrolling the page if necessary
                        if (!releaseScroll) {
                            e.originalEvent.preventDefault();
                        }
                        if (e.originalEvent.touches.length) {
                            // see how far user swiped
                            var diff = (touchDif - e.originalEvent.touches[0].pageY) / o.touchScrollStep;
                            // scroll content
                            scrollContent(diff, true);
                            touchDif = e.originalEvent.touches[0].pageY;
                        }
                    });

                    // set up initial height
                    getBarHeight();

                    // check start position
                    if (o.start === 'bottom') {
                        // scroll content to bottom
                        bar.css({ top: me.outerHeight() - bar.outerHeight() });
                        scrollContent(0, true);
                    }
                    else if (o.start !== 'top') {
                        // assume jQuery selector
                        scrollContent($(o.start).position().top, null, true);

                        // make sure bar stays hidden
                        if (!o.alwaysVisible) { bar.hide(); }
                    }

                    // attach scroll events
                    attachWheel(this);

                    function _onWheel(e) {
                        // use mouse wheel only when mouse is over
                        if (!isOverPanel) { return; }

                        var e = e || window.event;

                        var delta = 0;
                        if (e.wheelDelta) { delta = -e.wheelDelta / 120; }
                        if (e.detail) { delta = e.detail / 3; }

                        var target = e.target || e.srcTarget || e.srcElement;
                        if ($(target).closest('.' + o.wrapperClass).is(me.parent())) {
                            // scroll content
                            scrollContent(delta, true);
                        }

                        // stop window scroll
                        if (e.preventDefault && !releaseScroll) { e.preventDefault(); }
                        if (!releaseScroll) { e.returnValue = false; }
                    }

                    function scrollContent(y, isWheel, isJump) {
                        releaseScroll = false;
                        var delta = y;
                        var maxTop = me.outerHeight() - bar.outerHeight();

                        if (isWheel) {
                            // move bar with mouse wheel
                            delta = parseInt(bar.css('top')) + y * parseInt(o.wheelStep) / 100 * bar.outerHeight();

                            // move bar, make sure it doesn't go out
                            delta = Math.min(Math.max(delta, 0), maxTop);

                            // if scrolling down, make sure a fractional change to the
                            // scroll position isn't rounded away when the scrollbar's CSS is set
                            // this flooring of delta would happened automatically when
                            // bar.css is set below, but we floor here for clarity
                            delta = (y > 0) ? Math.ceil(delta) : Math.floor(delta);

                            // scroll the scrollbar
                            bar.css({ top: delta + 'px' });
                        }

                        // calculate actual scroll amount
                        percentScroll = parseInt(bar.css('top')) / (me.outerHeight() - bar.outerHeight());
                        delta = percentScroll * (me[0].scrollHeight - me.outerHeight());

                        if (isJump) {
                            delta = y;
                            var offsetTop = delta / me[0].scrollHeight * me.outerHeight();
                            offsetTop = Math.min(Math.max(offsetTop, 0), maxTop);
                            bar.css({ top: offsetTop + 'px' });
                        }

                        // scroll content
                        me.scrollTop(delta);

                        // fire scrolling event
                        me.trigger('slimscrolling', ~~delta);

                        // ensure bar is visible
                        showBar();

                        // trigger hide when scroll is stopped
                        hideBar();
                    }

                    function attachWheel(target) {
                        if (window.addEventListener) {
                            target.addEventListener('DOMMouseScroll', _onWheel, false);
                            target.addEventListener('mousewheel', _onWheel, false);
                        }
                        else {
                            document.attachEvent("onmousewheel", _onWheel)
                        }
                    }

                    function getBarHeight() {
                        // calculate scrollbar height and make sure it is not too small
                        barHeight = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), minBarHeight);
                        bar.css({ height: barHeight + 'px' });

                        // hide scrollbar if content is not long enough
                        var display = barHeight == me.outerHeight() ? 'none' : 'block';
                        bar.css({ display: display });
                    }

                    function showBar() {
                        // recalculate bar height
                        getBarHeight();
                        clearTimeout(queueHide);

                        // when bar reached top or bottom
                        if (percentScroll == ~~percentScroll) {
                            //release wheel
                            releaseScroll = o.allowPageScroll;

                            // publish approporiate event
                            if (lastScroll != percentScroll) {
                                var msg = (~~percentScroll == 0) ? 'top' : 'bottom';
                                me.trigger('slimscroll', msg);
                            }
                        }
                        else {
                            releaseScroll = false;
                        }
                        lastScroll = percentScroll;

                        // show only when required
                        if (barHeight >= me.outerHeight()) {
                            //allow window scroll
                            releaseScroll = true;
                            return;
                        }
                        bar.stop(true, true).fadeIn('fast');
                        if (o.railVisible) { rail.stop(true, true).fadeIn('fast'); }
                    }

                    function hideBar() {
                        // only hide when options allow it
                        if (!o.alwaysVisible) {
                            queueHide = setTimeout(function () {
                                if (!(o.disableFadeOut && isOverPanel) && !isOverBar && !isDragg) {
                                    bar.fadeOut('slow');
                                    rail.fadeOut('slow');
                                }
                            }, 1000);
                        }
                    }

                });

                // maintain chainability
                return this;
            }
        });

        $.fn.extend({
            slimscroll: $.fn.slimScroll
        });

    })(jQuery);

</script>

<script type="text/javascript">

    $(function () {

        $('#conflictRun').slimscroll();

    });
</script>