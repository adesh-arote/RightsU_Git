
@model List<RightsU_Entities.USPMHGetChartPopupList_Result>
@{
    string Message = Convert.ToString(Session["Message"]);
    MessageKey objMessageKey = new MessageKey();
    if (Session["objMessageKey"] != null)
    {
        objMessageKey = (MessageKey)Session["objMessageKey"];
    }    
}

<style>
       .slimScrollDiv {
        border: 1px solid #eee;    
        max-height:250px; 
    }
</style>

<script>
    $(document).ready(function () {
        debugger;
        $("#lblRecordCnt").text(@ViewBag.RecordCount);
        $("#hdnRecordCnt").val(@ViewBag.RecordCount);
        $("#hdnPageNumber").val(@((ViewBag.PageNo ?? 1)));
        $("#txtPgSize").val(@ViewBag.PageSize);
    
       
        $('#scroll').slimScroll();
        $('.slimScrollDiv').css('max-height', 250)
        $('#scroll').css("max-height",250)
        SetPaging();
    });

    $(".pagingSize").numeric({
        allowMinus: false,
        allowThouSep: false,
        allowDecSep: false,
        max: 99,
        min: 1
    });

    $('.expand_strRemarks').expander({
        slicePoint: 22,
        expandPrefix: '',
        expandText: '...@objMessageKey.readmore',
        collapseTimer: 0,
        userCollapseText: '<span>[^]</span>'
    });

    function addNumeric() {
        $(".pagingSize").numeric({
            allowMinus: false,
            allowThouSep: false,
            allowDecSep: false,
            max: 99,
            min: 1
        });
    }
    function SetPaging() {
        debugger;
        IsCall = 'N';
        var pageNo = parseInt($('#hdnPageNumber').val());
        var recordCount = parseInt($('#hdnRecordCnt').val());
        var pagePerBatch = parseInt($('#hdnPagePerBatch').val());
        var recordPerPage = parseInt($('#txtPgSize').val());

        var cnt = pageNo * recordPerPage;
        if (cnt >= recordCount) {
            var v1 = parseInt(recordCount / recordPerPage);
            if ((v1 * recordPerPage) == recordCount)
                pageNo = v1;
            else
                pageNo = v1 + 1;
        }

        if (pageNo == 0)
            pageNo = 1;

        var index = pageNo - 1;
        $('#hdnPageNumber').val(pageNo);

        var opt = null;
        opt = { callback: pageselectCallback };
        opt["items_per_page"] = recordPerPage;
        opt["num_display_entries"] = pagePerBatch;
        opt["num"] = 10;
        opt["prev_text"] = "<<";
        opt["next_text"] = ">>";
        opt["current_page"] = index;
        $("#divPagination").pagination(recordCount, opt);
    }
    function pageselectCallback(page_index, jq) {
        debugger;
        $('.required').removeClass('required');

        if (!ValidatePgSize())
            return false;

        var pageNo = page_index + 1
        $('#hdnPageNumber').val(pageNo);
        if (IsCall == 'Y') {

            var MHRequestCode = $('#hdnRequestCode').val();
            var callFor = $('#hdnCallForAM').val();
            if (callFor == 'AuthorisedMusicRequest') {
                BindGrid(MHRequestCode, '', '', callFor);
            }
            else {
                BindGrid(MHRequestCode);
            }
        }
        else
            IsCall = 'Y';
    }
    function txtPgSize_OnChange() {
        debugger;
        $("[required='required']").removeAttr("required");
        $('.required').removeClass('required');
        if (!ValidatePgSize())
            return false;

        var MHRequestCode = $('#hdnRequestCode').val();
        var callFor = $('#hdnCallForAM').val();
        if (callFor == 'AuthorisedMusicRequest') {
            BindGrid(MHRequestCode, '', '', callFor);
        }
        else {
            BindGrid(MHRequestCode);
        }
        SetPaging();
    }
    function ValidatePgSize() {
        debugger;
        var recordPerPage = $('#txtPgSize').val();
        if ($.trim(recordPerPage) != '') {
            var pageSize = parseInt(recordPerPage);
            if (pageSize > 0)
                return true;
        }
        $('#txtPgSize').attr('required', true)
        return false
    }
    function pageBinding() {
        SetPaging();
        BindGrid();
    }

    function ClosePopup() {
        $('#popup').modal('hide');
        $('#pupupHtml').empty();
    }

    (function ($) {

        jQuery.fn.extend({
            slimScroll: function (options) {

                var defaults = {
                    wheelStep: 20,
                    width: 'auto',
                    size: '7px',
                    color: '#000',
                    position: 'right',
                    distance: '1px',
                    start: 'top',
                    opacity: .4,
                    alwaysVisible: false,
                    railVisible: false,
                    railColor: '#333',
                    railOpacity: '0.2',
                    railClass: 'slimScrollRail',
                    barClass: 'slimScrollBar',
                    wrapperClass: 'slimScrollDiv',
                    allowPageScroll: false,
                    scroll: 0
                };

                var o = ops = $.extend(defaults, options);

                // do it for every element that matches selector
                this.each(function () {

                    var isOverPanel, isOverBar, isDragg, queueHide, barHeight, percentScroll,
                      divS = '<div></div>',
                      minBarHeight = 30,
                      releaseScroll = false,
                      wheelStep = parseInt(o.wheelStep),
                      cwidth = o.width,
                      cheight = o.height,
                      size = o.size,
                      color = o.color,
                      position = o.position,
                      distance = o.distance,
                      start = o.start,
                      opacity = o.opacity,
                      alwaysVisible = o.alwaysVisible,
                      railVisible = o.railVisible,
                      railColor = o.railColor,
                      railOpacity = o.railOpacity,
                      allowPageScroll = o.allowPageScroll,
                      scroll = o.scroll;

                    // used in event handlers and for better minification
                    var me = $(this);

                    //ensure we are not binding it again
                    if (me.parent().hasClass('slimScrollDiv')) {
                        //check if we should scroll existing instance
                        if (scroll) {
                            //find bar and rail
                            bar = me.parent().find('.slimScrollBar');
                            rail = me.parent().find('.slimScrollRail');

                            //scroll by given amount of pixels
                            scrollContent(me.scrollTop() + parseInt(scroll), false, true);
                        }

                        return;
                    }

                    // wrap content
                    var wrapper = $(divS)
                      .addClass(o.wrapperClass)
                      .css({
                          position: 'relative',
                          overflow: 'hidden',
                          width: cwidth,
                          height: cheight
                      });

                    // update style for the div
                    me.css({
                        overflow: 'hidden',
                        width: cwidth,
                        height: cheight
                    });

                    // create scrollbar rail
                    var rail = $(divS)
                      .addClass(o.railClass)
                      .css({
                          width: size,
                          height: '100%',
                          position: 'absolute',
                          top: 0,
                          display: (alwaysVisible && railVisible) ? 'block' : 'none',
                          'border-radius': size,
                          background: railColor,
                          opacity: railOpacity,
                          zIndex: 90
                      });

                    // create scrollbar
                    var bar = $(divS)
                      .addClass(o.barClass)
                      .css({
                          background: color,
                          width: size,
                          position: 'absolute',
                          top: 0,
                          opacity: opacity,
                          display: alwaysVisible ? 'block' : 'none',
                          'border-radius': size,
                          BorderRadius: size,
                          MozBorderRadius: size,
                          WebkitBorderRadius: size,
                          zIndex: 99
                      });

                    // set position
                    var posCss = (position == 'right') ? { right: distance } : { left: distance };
                    rail.css(posCss);
                    bar.css(posCss);

                    // wrap it
                    me.wrap(wrapper);

                    // append to parent div
                    me.parent().append(bar);
                    me.parent().append(rail);

                    // make it draggable
                    bar.draggable({
                        axis: 'y',
                        containment: 'parent',
                        start: function () { isDragg = true; },
                        stop: function () { isDragg = false; hideBar(); },
                        drag: function (e) {
                            // scroll content
                            scrollContent(0, $(this).position().top, false);
                        }
                    });

                    // on rail over
                    rail.hover(function () {
                        showBar();
                    }, function () {
                        hideBar();
                    });

                    // on bar over
                    bar.hover(function () {
                        isOverBar = true;
                    }, function () {
                        isOverBar = false;
                    });

                    // show on parent mouseover
                    me.hover(function () {
                        isOverPanel = true;
                        showBar();
                        hideBar();
                    }, function () {
                        isOverPanel = false;
                        hideBar();
                    });

                    var _onWheel = function (e) {
                        // use mouse wheel only when mouse is over
                        if (!isOverPanel) { return; }

                        var e = e || window.event;

                        var delta = 0;
                        if (e.wheelDelta) { delta = -e.wheelDelta / 120; }
                        if (e.detail) { delta = e.detail / 3; }

                        // scroll content
                        scrollContent(delta, true);

                        // stop window scroll
                        if (e.preventDefault && !releaseScroll) { e.preventDefault(); }
                        if (!releaseScroll) { e.returnValue = false; }
                    }

                    function scrollContent(y, isWheel, isJump) {
                        var delta = y;

                        if (isWheel) {
                            // move bar with mouse wheel
                            delta = parseInt(bar.css('top')) + y * wheelStep / 100 * bar.outerHeight();

                            // move bar, make sure it doesn't go out
                            var maxTop = me.outerHeight() - bar.outerHeight();
                            delta = Math.min(Math.max(delta, 0), maxTop);

                            // scroll the scrollbar
                            bar.css({ top: delta + 'px' });
                        }

                        // calculate actual scroll amount
                        percentScroll = parseInt(bar.css('top')) / (me.outerHeight() - bar.outerHeight());
                        delta = percentScroll * (me[0].scrollHeight - me.outerHeight());

                        if (isJump) {
                            delta = y;
                            var offsetTop = delta / me[0].scrollHeight * me.outerHeight();
                            bar.css({ top: offsetTop + 'px' });
                        }

                        // scroll content
                        me.scrollTop(delta);

                        // ensure bar is visible
                        showBar();

                        // trigger hide when scroll is stopped
                        hideBar();
                    }

                    var attachWheel = function () {
                        if (window.addEventListener) {
                            this.addEventListener('DOMMouseScroll', _onWheel, false);
                            this.addEventListener('mousewheel', _onWheel, false);
                        }
                        else {
                            document.attachEvent("onmousewheel", _onWheel)
                        }
                    }

                    // attach scroll events
                    attachWheel();

                    function getBarHeight() {
                        // calculate scrollbar height and make sure it is not too small
                        barHeight = Math.max((me.outerHeight() / me[0].scrollHeight) * me.outerHeight(), minBarHeight);
                        bar.css({ height: barHeight + 'px' });
                    }

                    // set up initial height
                    getBarHeight();

                    function showBar() {
                        // recalculate bar height
                        getBarHeight();
                        clearTimeout(queueHide);

                        // release wheel when bar reached top or bottom
                        releaseScroll = allowPageScroll && percentScroll == ~~percentScroll;

                        // show only when required
                        if (barHeight >= me.outerHeight()) {
                            //allow window scroll
                            releaseScroll = true;
                            return;
                        }
                        bar.stop(true, true).fadeIn('fast');
                        if (railVisible) { rail.stop(true, true).fadeIn('fast'); }
                    }

                    function hideBar() {
                        // only hide when options allow it
                        if (!alwaysVisible) {
                            queueHide = setTimeout(function () {
                                if (!isOverBar && !isDragg) {
                                    bar.fadeOut('slow');
                                    rail.fadeOut('slow');
                                }
                            }, 1000);
                        }
                    }

                    // check start position
                    if (start == 'bottom') {
                        // scroll content to bottom
                        bar.css({ top: me.outerHeight() - bar.outerHeight() });
                        scrollContent(0, true);
                    }
                    else if (typeof start == 'object') {
                        // scroll content
                        scrollContent($(start).position().top, null, true);

                        // make sure bar stays hidden
                        if (!alwaysVisible) { bar.hide(); }
                    }
                });

                // maintain chainability
                return this;
            }
        });

        jQuery.fn.extend({
            slimscroll: jQuery.fn.slimScroll
        });

    })(jQuery);

    </script>


<div class="modal_block modal_header">
    <a class="close" onclick="ClosePopup()">
        <span>x</span>
        <span class="sr-only">Close</span>
    </a>
    @if ( @ViewBag.callFor == "PieChart")
    {
        <h5><b>Music Labels Consumed By : @ViewBag.VendorName</b></h5>
    }
    else if (@ViewBag.callFor == "BarChart")
    {
        <h5><b>Music Tracks Consumed By : @ViewBag.VendorName</b></h5>
    }
    else
    {
        <h5><b>Details : <span id="popUpHeader"></span>  </b></h5>
    }
 </div>
<div class="paging_area clearfix" style="margin-top:10px;margin-right:20px;margin-left:20px">
    <span class="pull-left" >@objMessageKey.TotalRecords :  </span>
    <span class="pull-left" id="lblRecordCnt"></span>
    <input type="hidden" id="hdnPageNumber" name="hdnPageNumber" value="1" />
    <input type="hidden" id="hdnPagePerBatch" name="hdnPagePerBatch" value="5" />
    <input type="hidden" id="hdnRecordCnt" name="hdnRecordCnt" value="0" />

    <div id="divPagination" class="pagination">
    </div>
    <span class="pull-right">
        @objMessageKey.PageSize:
        <input type="text" id="txtPgSize" name="txtPgSize" class="smallTextBox pagingSize" value="10"
               onchange="txtPgSize_OnChange()">
    </span>
</div>

  <div class="modalPopup">
        <div class="add_title_popup">
                <div class="tab-content clearfix table-wrapper scale_table_container" style="margin: 20px;" >
                    <div class="scale_table_block" >
                        <div id="scroll">
                        <table class=" table table-bordered table-hover ">
                            <thead>
                                <tr>
                                    <th style="width:20%;">Show Name</th>
                                    <th style="width:15%;">Episode No</th>
                                    <th style="width:20%;">Music Track Name</th>
                                    <th style="width:15%;">Movie Album Name</th>
                                    <th style="width:30%;">Remarks</th>
                                </tr>
                            </thead>


                            <tbody>
                                @if (Model.Count > 0)
                                {
                                    foreach (var item in Model)
                                    {
                                        <tr>
                                            <td>@((item.ShowName ?? "NA"))</td>
                                            <td align="center">@item.EpisodeNo </td>
                                            <td>@((item.MusicTrackName ?? "NA"))</td>
                                            <td>@((item.MovieAlbumName ?? "NA"))</td>
                                            <td><span class="expand_strRemarks">@item.Remarks</span></td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="5">No record found</td>
                                    </tr>
                                }

                            </tbody>
                        </table>

                        </div>
                    </div>
            </div>
        </div>
    </div>

    <div class="modal_block_full">
        <div class="form_links">
            <ul class="modal_block clearfix" style="padding-left:10px; padding-top: 5px;">
                <li>
                    <a class="btn btn-primary pull-right"  style="margin-left:10px;" onclick="ClosePopup()">Close</a>
                </li>
            </ul>
        </div>
    </div>
